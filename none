[33mcommit 1c89cb8638d15c3a6107f9094ec809ed6b1ebf68[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m, [m[1;31mPICS_Config_Builder/master[m[33m)[m
Author: rechosuave <19471723+rechosuave@users.noreply.github.com>
Date:   Thu Sep 20 09:30:38 2018 -0500

    c.crane--Sept-20-2018  error free syntax version prior to debug

[1mdiff --git a/.gitattributes b/.gitattributes[m
[1mdeleted file mode 100644[m
[1mindex 1ff0c42..0000000[m
[1m--- a/.gitattributes[m
[1m+++ /dev/null[m
[36m@@ -1,63 +0,0 @@[m
[31m-###############################################################################[m
[31m-# Set default behavior to automatically normalize line endings.[m
[31m-###############################################################################[m
[31m-* text=auto[m
[31m-[m
[31m-###############################################################################[m
[31m-# Set default behavior for command prompt diff.[m
[31m-#[m
[31m-# This is need for earlier builds of msysgit that does not have it on by[m
[31m-# default for csharp files.[m
[31m-# Note: This is only used by command line[m
[31m-###############################################################################[m
[31m-#*.cs     diff=csharp[m
[31m-[m
[31m-###############################################################################[m
[31m-# Set the merge driver for project and solution files[m
[31m-#[m
[31m-# Merging from the command prompt will add diff markers to the files if there[m
[31m-# are conflicts (Merging from VS is not affected by the settings below, in VS[m
[31m-# the diff markers are never inserted). Diff markers may cause the following [m
[31m-# file extensions to fail to load in VS. An alternative would be to treat[m
[31m-# these files as binary and thus will always conflict and require user[m
[31m-# intervention with every merge. To do so, just uncomment the entries below[m
[31m-###############################################################################[m
[31m-#*.sln       merge=binary[m
[31m-#*.csproj    merge=binary[m
[31m-#*.vbproj    merge=binary[m
[31m-#*.vcxproj   merge=binary[m
[31m-#*.vcproj    merge=binary[m
[31m-#*.dbproj    merge=binary[m
[31m-#*.fsproj    merge=binary[m
[31m-#*.lsproj    merge=binary[m
[31m-#*.wixproj   merge=binary[m
[31m-#*.modelproj merge=binary[m
[31m-#*.sqlproj   merge=binary[m
[31m-#*.wwaproj   merge=binary[m
[31m-[m
[31m-###############################################################################[m
[31m-# behavior for image files[m
[31m-#[m
[31m-# image files are treated as binary by default.[m
[31m-###############################################################################[m
[31m-#*.jpg   binary[m
[31m-#*.png   binary[m
[31m-#*.gif   binary[m
[31m-[m
[31m-###############################################################################[m
[31m-# diff behavior for common document formats[m
[31m-# [m
[31m-# Convert binary document formats to text before diffing them. This feature[m
[31m-# is only available from the command line. Turn it on by uncommenting the [m
[31m-# entries below.[m
[31m-###############################################################################[m
[31m-#*.doc   diff=astextplain[m
[31m-#*.DOC   diff=astextplain[m
[31m-#*.docx  diff=astextplain[m
[31m-#*.DOCX  diff=astextplain[m
[31m-#*.dot   diff=astextplain[m
[31m-#*.DOT   diff=astextplain[m
[31m-#*.pdf   diff=astextplain[m
[31m-#*.PDF   diff=astextplain[m
[31m-#*.rtf   diff=astextplain[m
[31m-#*.RTF   diff=astextplain[m
[1mdiff --git a/.vs/PICS_Config_Builder/v15/.suo b/.vs/PICS_Config_Builder/v15/.suo[m
[1mnew file mode 100644[m
[1mindex 0000000..980bdbd[m
Binary files /dev/null and b/.vs/PICS_Config_Builder/v15/.suo differ
[1mdiff --git a/.vs/PICS_Config_Builder/v15/Server/sqlite3/storage.ide b/.vs/PICS_Config_Builder/v15/Server/sqlite3/storage.ide[m
[1mnew file mode 100644[m
[1mindex 0000000..a687681[m
Binary files /dev/null and b/.vs/PICS_Config_Builder/v15/Server/sqlite3/storage.ide differ
[1mdiff --git a/.vs/PICS_Config_Builder/v15/Server/sqlite3/storage.ide-shm b/.vs/PICS_Config_Builder/v15/Server/sqlite3/storage.ide-shm[m
[1mnew file mode 100644[m
[1mindex 0000000..f255944[m
Binary files /dev/null and b/.vs/PICS_Config_Builder/v15/Server/sqlite3/storage.ide-shm differ
[1mdiff --git a/.vs/PICS_Config_Builder/v15/Server/sqlite3/storage.ide-wal b/.vs/PICS_Config_Builder/v15/Server/sqlite3/storage.ide-wal[m
[1mnew file mode 100644[m
[1mindex 0000000..03919ed[m
Binary files /dev/null and b/.vs/PICS_Config_Builder/v15/Server/sqlite3/storage.ide-wal differ
[1mdiff --git a/.vs/ProjectSettings.json b/.vs/ProjectSettings.json[m
[1mnew file mode 100644[m
[1mindex 0000000..f8b4888[m
[1m--- /dev/null[m
[1m+++ b/.vs/ProjectSettings.json[m
[36m@@ -0,0 +1,3 @@[m
[32m+[m[32m{[m
[32m+[m[32m  "CurrentProjectSetting": null[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/.vs/VSWorkspaceState.json b/.vs/VSWorkspaceState.json[m
[1mnew file mode 100644[m
[1mindex 0000000..6b61141[m
[1m--- /dev/null[m
[1m+++ b/.vs/VSWorkspaceState.json[m
[36m@@ -0,0 +1,6 @@[m
[32m+[m[32m{[m
[32m+[m[32m  "ExpandedNodes": [[m
[32m+[m[32m    ""[m
[32m+[m[32m  ],[m
[32m+[m[32m  "PreviewInSolutionExplorer": false[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/.vs/slnx.sqlite b/.vs/slnx.sqlite[m
[1mnew file mode 100644[m
[1mindex 0000000..bc3bdd0[m
Binary files /dev/null and b/.vs/slnx.sqlite differ
[1mdiff --git a/PICS_Config_Builder/Class1.vb b/PICS_Config_Builder/Class1.vb[m
[1mnew file mode 100644[m
[1mindex 0000000..c4f354d[m
[1m--- /dev/null[m
[1m+++ b/PICS_Config_Builder/Class1.vb[m
[36m@@ -0,0 +1,8 @@[m
[32m+[m[32mï»¿Imports Office = Microsoft.Office.Interop[m
[32m+[m[32mImports Excel = Microsoft.Office.Interop.Excel[m
[32m+[m
[32m+[m[32mPublic Class Class1[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mEnd Class[m
[1mdiff --git a/PICS_Config_Builder/Form1.Designer.vb b/PICS_Config_Builder/Form1.Designer.vb[m
[1mindex a418df0..6fe2166 100644[m
[1m--- a/PICS_Config_Builder/Form1.Designer.vb[m
[1m+++ b/PICS_Config_Builder/Form1.Designer.vb[m
[36m@@ -22,10 +22,79 @@[m [mPartial Class Form1[m
     'Do not modify it using the code editor.[m
     <System.Diagnostics.DebuggerStepThrough()> _[m
     Private Sub InitializeComponent()[m
[31m-        components = New System.ComponentModel.Container()[m
[32m+[m[32m        Me.Label1 = New System.Windows.Forms.Label()[m
[32m+[m[32m        Me.BtnDataAndRun = New System.Windows.Forms.Button()[m
[32m+[m[32m        Me.BtnClearAllSheets = New System.Windows.Forms.Button()[m
[32m+[m[32m        Me.BtnExit = New System.Windows.Forms.Button()[m
[32m+[m[32m        Me.CPU_PREFIX = New System.Windows.Forms.TextBox()[m
[32m+[m[32m        Me.SuspendLayout()[m
[32m+[m[32m        '[m
[32m+[m[32m        'Label1[m
[32m+[m[32m        '[m
[32m+[m[32m        Me.Label1.AutoSize = True[m
[32m+[m[32m        Me.Label1.Location = New System.Drawing.Point(56, 71)[m
[32m+[m[32m        Me.Label1.Name = "Label1"[m
[32m+[m[32m        Me.Label1.Size = New System.Drawing.Size(97, 16)[m
[32m+[m[32m        Me.Label1.TabIndex = 0[m
[32m+[m[32m        Me.Label1.Text = "Topic Name:"[m
[32m+[m[32m        '[m
[32m+[m[32m        'BtnDataAndRun[m
[32m+[m[32m        '[m
[32m+[m[32m        Me.BtnDataAndRun.Location = New System.Drawing.Point(77, 139)[m
[32m+[m[32m        Me.BtnDataAndRun.Name = "BtnDataAndRun"[m
[32m+[m[32m        Me.BtnDataAndRun.Size = New System.Drawing.Size(137, 75)[m
[32m+[m[32m        Me.BtnDataAndRun.TabIndex = 1[m
[32m+[m[32m        Me.BtnDataAndRun.Text = " Select IO Sheet " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "   &&" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Generate Output"[m
[32m+[m[32m        Me.BtnDataAndRun.UseVisualStyleBackColor = True[m
[32m+[m[32m        '[m
[32m+[m[32m        'BtnClearAllSheets[m
[32m+[m[32m        '[m
[32m+[m[32m        Me.BtnClearAllSheets.Location = New System.Drawing.Point(290, 139)[m
[32m+[m[32m        Me.BtnClearAllSheets.Name = "BtnClearAllSheets"[m
[32m+[m[32m        Me.BtnClearAllSheets.Size = New System.Drawing.Size(137, 75)[m
[32m+[m[32m        Me.BtnClearAllSheets.TabIndex = 2[m
[32m+[m[32m        Me.BtnClearAllSheets.Text = "Clear All Sheets"[m
[32m+[m[32m        Me.BtnClearAllSheets.UseVisualStyleBackColor = True[m
[32m+[m[32m        '[m
[32m+[m[32m        'BtnExit[m
[32m+[m[32m        '[m
[32m+[m[32m        Me.BtnExit.Location = New System.Drawing.Point(339, 266)[m
[32m+[m[32m        Me.BtnExit.Name = "BtnExit"[m
[32m+[m[32m        Me.BtnExit.Size = New System.Drawing.Size(75, 23)[m
[32m+[m[32m        Me.BtnExit.TabIndex = 3[m
[32m+[m[32m        Me.BtnExit.Text = "Exit"[m
[32m+[m[32m        Me.BtnExit.UseVisualStyleBackColor = True[m
[32m+[m[32m        '[m
[32m+[m[32m        'CPU_PREFIX[m
[32m+[m[32m        '[m
[32m+[m[32m        Me.CPU_PREFIX.Font = New System.Drawing.Font("Microsoft Sans Serif", 9.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))[m
[32m+[m[32m        Me.CPU_PREFIX.Location = New System.Drawing.Point(159, 65)[m
[32m+[m[32m        Me.CPU_PREFIX.Name = "CPU_PREFIX"[m
[32m+[m[32m        Me.CPU_PREFIX.Size = New System.Drawing.Size(221, 22)[m
[32m+[m[32m        Me.CPU_PREFIX.TabIndex = 4[m
[32m+[m[32m        '[m
[32m+[m[32m        'Form1[m
[32m+[m[32m        '[m
[32m+[m[32m        Me.AutoScaleDimensions = New System.Drawing.SizeF(9.0!, 16.0!)[m
         Me.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font[m
[31m-        Me.ClientSize = New System.Drawing.Size(800, 450)[m
[31m-        Me.Text = "Form1"[m
[32m+[m[32m        Me.ClientSize = New System.Drawing.Size(473, 307)[m
[32m+[m[32m        Me.Controls.Add(Me.CPU_PREFIX)[m
[32m+[m[32m        Me.Controls.Add(Me.BtnExit)[m
[32m+[m[32m        Me.Controls.Add(Me.BtnClearAllSheets)[m
[32m+[m[32m        Me.Controls.Add(Me.BtnDataAndRun)[m
[32m+[m[32m        Me.Controls.Add(Me.Label1)[m
[32m+[m[32m        Me.Font = New System.Drawing.Font("Microsoft Sans Serif", 9.75!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))[m
[32m+[m[32m        Me.Margin = New System.Windows.Forms.Padding(4)[m
[32m+[m[32m        Me.Name = "Form1"[m
[32m+[m[32m        Me.Text = "PICS Config Builder"[m
[32m+[m[32m        Me.ResumeLayout(False)[m
[32m+[m[32m        Me.PerformLayout()[m
[32m+[m
     End Sub[m
 [m
[32m+[m[32m    Friend WithEvents Label1 As System.Windows.Forms.Label[m
[32m+[m[32m    Friend WithEvents BtnDataAndRun As System.Windows.Forms.Button[m
[32m+[m[32m    Friend WithEvents BtnClearAllSheets As System.Windows.Forms.Button[m
[32m+[m[32m    Friend WithEvents BtnExit As System.Windows.Forms.Button[m
[32m+[m[32m    Friend WithEvents CPU_PREFIX As System.Windows.Forms.TextBox[m
 End Class[m
[1mdiff --git a/PICS_Config_Builder/Form1.resx b/PICS_Config_Builder/Form1.resx[m
[1mnew file mode 100644[m
[1mindex 0000000..1af7de1[m
[1m--- /dev/null[m
[1m+++ b/PICS_Config_Builder/Form1.resx[m
[36m@@ -0,0 +1,120 @@[m
[32m+[m[32mï»¿<?xml version="1.0" encoding="utf-8"?>[m
[32m+[m[32m<root>[m
[32m+[m[32m  <!--[m[41m [m
[32m+[m[32m    Microsoft ResX Schema[m[41m [m
[32m+[m[41m    [m
[32m+[m[32m    Version 2.0[m
[32m+[m[41m    [m
[32m+[m[32m    The primary goals of this format is to allow a simple XML format[m[41m [m
[32m+[m[32m    that is mostly human readable. The generation and parsing of the[m[41m [m
[32m+[m[32m    various data types are done through the TypeConverter classes[m[41m [m
[32m+[m[32m    associated with the data types.[m
[32m+[m[41m    [m
[32m+[m[32m    Example:[m
[32m+[m[41m    [m
[32m+[m[32m    ... ado.net/XML headers & schema ...[m
[32m+[m[32m    <resheader name="resmimetype">text/microsoft-resx</resheader>[m
[32m+[m[32m    <resheader name="version">2.0</resheader>[m
[32m+[m[32m    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>[m
[32m+[m[32m    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>[m
[32m+[m[32m    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>[m
[32m+[m[32m    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>[m
[32m+[m[32m    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">[m
[32m+[m[32m        <value>[base64 mime encoded serialized .NET Framework object]</value>[m
[32m+[m[32m    </data>[m
[32m+[m[32m    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">[m
[32m+[m[32m        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>[m
[32m+[m[32m        <comment>This is a comment</comment>[m
[32m+[m[32m    </data>[m
[32m+[m[41m                [m
[32m+[m[32m    There are any number of "resheader" rows that contain simple[m[41m [m
[32m+[m[32m    name/value pairs.[m
[32m+[m[41m    [m
[32m+[m[32m    Each data row contains a name, and value. The row also contains a[m[41m [m
[32m+[m[32m    type or mimetype. Type corresponds to a .NET class that support[m[41m [m
[32m+[m[32m    text/value conversion through the TypeConverter architecture.[m[41m [m
[32m+[m[32m    Classes that don't support this are serialized and stored with the[m[41m [m
[32m+[m[32m    mimetype set.[m
[32m+[m[41m    [m
[32m+[m[32m    The mimetype is used for serialized objects, and tells the[m[41m [m
[32m+[m[32m    ResXResourceReader how to depersist the object. This is currently not[m[41m [m
[32m+[m[32m    extensible. For a given mimetype the value must be set accordingly:[m
[32m+[m[41m    [m
[32m+[m[32m    Note - application/x-microsoft.net.object.binary.base64 is the format[m[41m [m
[32m+[m[32m    that the ResXResourceWriter will generate, however the reader can[m[41m [m
[32m+[m[32m    read any of the formats listed below.[m
[32m+[m[41m    [m
[32m+[m[32m    mimetype: application/x-microsoft.net.object.binary.base64[m
[32m+[m[32m    value   : The object must be serialized with[m[41m [m
[32m+[m[32m            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter[m
[32m+[m[32m            : and then encoded with base64 encoding.[m
[32m+[m[41m    [m
[32m+[m[32m    mimetype: application/x-microsoft.net.object.soap.base64[m
[32m+[m[32m    value   : The object must be serialized with[m[41m [m
[32m+[m[32m            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter[m
[32m+[m[32m            : and then encoded with base64 encoding.[m
[32m+[m
[32m+[m[32m    mimetype: application/x-microsoft.net.object.bytearray.base64[m
[32m+[m[32m    value   : The object must be serialized into a byte array[m[41m [m
[32m+[m[32m            : using a System.ComponentModel.TypeConverter[m
[32m+[m[32m            : and then encoded with base64 encoding.[m
[32m+[m[32m    -->[m
[32m+[m[32m  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">[m
[32m+[m[32m    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />[m
[32m+[m[32m    <xsd:element name="root" msdata:IsDataSet="true">[m
[32m+[m[32m      <xsd:complexType>[m
[32m+[m[32m        <xsd:choice maxOccurs="unbounded">[m
[32m+[m[32m          <xsd:element name="metadata">[m
[32m+[m[32m            <xsd:complexType>[m
[32m+[m[32m              <xsd:sequence>[m
[32m+[m[32m                <xsd:element name="value" type="xsd:string" minOccurs="0" />[m
[32m+[m[32m              </xsd:sequence>[m
[32m+[m[32m              <xsd:attribute name="name" use="required" type="xsd:string" />[m
[32m+[m[32m              <xsd:attribute name="type" type="xsd:string" />[m
[32m+[m[32m              <xsd:attribute name="mimetype" type="xsd:string" />[m
[32m+[m[32m              <xsd:attribute ref="xml:space" />[m
[32m+[m[32m            </xsd:complexType>[m
[32m+[m[32m          </xsd:element>[m
[32m+[m[32m          <xsd:element name="assembly">[m
[32m+[m[32m            <xsd:complexType>[m
[32m+[m[32m              <xsd:attribute name="alias" type="xsd:string" />[m
[32m+[m[32m              <xsd:attribute name="name" type="xsd:string" />[m
[32m+[m[32m            </xsd:complexType>[m
[32m+[m[32m          </xsd:element>[m
[32m+[m[32m          <xsd:element name="data">[m
[32m+[m[32m            <xsd:complexType>[m
[32m+[m[32m              <xsd:sequence>[m
[32m+[m[32m                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />[m
[32m+[m[32m                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />[m
[32m+[m[32m              </xsd:sequence>[m
[32m+[m[32m              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />[m
[32m+[m[32m              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />[m
[32m+[m[32m              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />[m
[32m+[m[32m              <xsd:attribute ref="xml:space" />[m
[32m+[m[32m            </xsd:complexType>[m
[32m+[m[32m          </xsd:element>[m
[32m+[m[32m          <xsd:element name="resheader">[m
[32m+[m[32m            <xsd:complexType>[m
[32m+[m[32m              <xsd:sequence>[m
[32m+[m[32m                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />[m
[32m+[m[32m              </xsd:sequence>[m
[32m+[m[32m              <xsd:attribute name="name" type="xsd:string" use="required" />[m
[32m+[m[32m            </xsd:complexType>[m
[32m+[m[32m          </xsd:element>[m
[32m+[m[32m        </xsd:choice>[m
[32m+[m[32m      </xsd:complexType>[m
[32m+[m[32m    </xsd:element>[m
[32m+[m[32m  </xsd:schema>[m
[32m+[m[32m  <resheader name="resmimetype">[m
[32m+[m[32m    <value>text/microsoft-resx</value>[m
[32m+[m[32m  </resheader>[m
[32m+[m[32m  <resheader name="version">[m
[32m+[m[32m    <value>2.0</value>[m
[32m+[m[32m  </resheader>[m
[32m+[m[32m  <resheader name="reader">[m
[32m+[m[32m    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>[m
[32m+[m[32m  </resheader>[m
[32m+[m[32m  <resheader name="writer">[m
[32m+[m[32m    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>[m
[32m+[m[32m  </resheader>[m
[32m+[m[32m</root>[m
\ No newline at end of file[m
[1mdiff --git a/PICS_Config_Builder/Form1.vb b/PICS_Config_Builder/Form1.vb[m
[1mindex 17d6595..8b560de 100644[m
[1m--- a/PICS_Config_Builder/Form1.vb[m
[1m+++ b/PICS_Config_Builder/Form1.vb[m
[36m@@ -1,3 +1,34 @@[m
[31m-ï»¿Public Class Form1[m
[32m+[m[32mï»¿[m
[32m+[m[32mImports Office = Microsoft.Office.Interop[m
[32m+[m[32mImports Excel = Microsoft.Office.Interop.Excel[m
 [m
[32m+[m[32mPublic Class Form1[m
[32m+[m
[32m+[m[32m    ' Declare variables, start Excel and get Application object[m
[32m+[m[32m    Dim XLApp As New Excel.Application[m
[32m+[m[32m    Dim XLWrkBook As Excel.Workbook = XLApp.Workbooks[m
[32m+[m[32m    Dim XLWrkSheet As Excel.Worksheet = CType(XLWrkBook.ActiveSheet, Worksheet)[m
[32m+[m
[32m+[m[32m    Private Sub BtnDataAndRun_Click(sender As Object, e As EventArgs) Handles BtnDataAndRun.Click[m
[32m+[m
[32m+[m[32m        XLWrkBook.Visible = True[m
[32m+[m[32m        XLApp.UserControl = True[m
[32m+[m
[32m+[m[32m        Call Button_Data_And_Run(XLWrkBook)[m
[32m+[m[32m        MsgBox("Outputs Generated")[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Private Sub BtnClearAllSheets_Click(sender As Object, e As EventArgs) Handles BtnClearAllSheets.Click[m
[32m+[m
[32m+[m[32m        Clear_All_Sheets(XLWrkBook)[m
[32m+[m[32m        MsgBox("All Sheets Cleared")[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Private Sub BtnExit_Click(sender As Object, e As EventArgs) Handles BtnExit.Click[m
[32m+[m
[32m+[m[32m        Close()[m
[32m+[m
[32m+[m[32m    End Sub[m
 End Class[m
[1mdiff --git a/PICS_Config_Builder/ImportData.vb b/PICS_Config_Builder/ImportData.vb[m
[1mindex 954b261..e1bbcee 100644[m
[1m--- a/PICS_Config_Builder/ImportData.vb[m
[1m+++ b/PICS_Config_Builder/ImportData.vb[m
[36m@@ -1,105 +1,137 @@[m
[31m-Sub Button_Import_Data(ByRef x As Integer)[m
[31m-    Dim CopiedSheet As Worksheet[m
[31m-    Dim x As Integer[m
[31m-    Dim fName As String[m
[31m-    Dim picsBuilder As String[m
[31m-    Dim projectBuilder As String[m
[31m-    Dim cpuImport As String[m
 [m
[31m-    Application.ScreenUpdating = False[m
[32m+[m[32mImports Office = Microsoft.Office.Interop[m
[32m+[m[32mImports Excel = Microsoft.Office.Interop.Excel[m
 [m
[31m-    Application.DisplayAlerts = False 'Turn safety alerts OFF[m
[32m+[m[32mModule ImportData[m
 [m
[31m-    Call Unhide_All_Sheets()[m
[32m+[m[32m    Sub Button_Data_And_Run(ByRef wb As Workbook)[m
 [m
[31m-    Sheets("IO Sheets").Select[m
[31m-    Range("A2:AA9999").Clear[m
[32m+[m[32m        Call Button_Import_Data(wb)[m
 [m
[31m-    picsBuilder = ActiveWorkbook.Name[m
[32m+[m[32m        wb.Application.ScreenUpdating = False[m
 [m
[31m-    fName = Application.GetOpenFilename("Excel files(*.xls; *.xlsm), *.xls;*.xlsm", 2, "Select a Project Config file.")[m
[31m-    If fName = "" Or fName = "False" Then Exit Sub[m
[32m+[m[32m        Call Generate_Sim_Data(wb)[m
[32m+[m[32m        Call Generate_Memory_Data(wb)[m
[32m+[m[32m        Call Generate_Wire_Data(wb)[m
 [m
[31m-    Workbooks.Open(fName)[m
[31m-    projectBuilder = ActiveWorkbook.Name[m
[32m+[m[32m        Dim outFolder As String[m
[32m+[m[32m        outFolder = Create_Output_Folder(wb)[m
 [m
[31m-    cpuImport = Sheets("Instructions").Range("C3").Value[m
[31m-    Sheets("IO Sheets").UsedRange.Copy[m
[32m+[m[32m        Call Export_CSV(outFolder, "SimData", "OPC_Tags.csv")[m
[32m+[m[32m        Call Export_CSV(outFolder, "MemoryData", "GLOBAL_Tags.csv")[m
[32m+[m[32m        Call Export_Wire_Data(wb, outFolder)[m
 [m
[31m-    ' Paste entire IO sheet[m
[31m-    Workbooks(picsBuilder).Activate[m
[31m-    Sheets("IO Sheets").Select[m
[31m-    Range("A1").PasteSpecial(Paste:=xlValues)[m
[32m+[m[32m        wb.Application.ScreenUpdating = False[m
 [m
[31m-    ' Remove any white space at the top[m
[31m-    Do While Range("A1") <> "PLCBaseTag"[m
[31m-        Range("A1").EntireRow.Delete[m
[31m-    Loop[m
[32m+[m[32m    End Sub[m
 [m
[31m-    ' Fix all selections to look nice[m
[31m-    If Sheets("Instructions").Range("CPU_PREFIX").Value = "" Then[m
[31m-        Sheets("Instructions").Range("CPU_PREFIX").Value = cpuImport[m
[31m-    End If[m
[32m+[m[32m    Sub Button_Import_Data(ByRef wb As Workbook)[m
 [m
[31m-    Reset_Sheet("Instructions")[m
[31m-    Reset_Sheet("IO Sheets")[m
[31m-    Sheets("Instructions").Select[m
[32m+[m[32m        Dim projectfN As String[m
[32m+[m[32m        Dim picsBuilder As String[m
[32m+[m[32m        Dim projectBuilder As String[m
[32m+[m[32m        Dim cpuImport As String[m
 [m
[31m-    Call Hide_Sheets()[m
[32m+[m[32m        wb.Application.ScreenUpdating = False[m
 [m
[31m-    Workbooks(projectBuilder).Close(SaveChanges:=False)[m
[31m-    Application.DisplayAlerts = True 'Turn safety alerts ON[m
[32m+[m[32m        wb.Application.DisplayAlerts = False 'Turn safety alerts OFF[m
 [m
[31m-    Application.ScreenUpdating = True[m
[32m+[m[32m        Call Unhide_All_Sheets(wb)[m
 [m
[31m-End Sub[m
[32m+[m[32m        Dim ws As Worksheet = wb.Sheets("IO Sheets").Select[m
[32m+[m[32m        ws.Range("A2:AA9999").Clear()[m
 [m
[31m-Sub Button_Data_And_Run(ByRef x As Integer)[m
[32m+[m[32m        picsBuilder = wb.Name[m
 [m
[31m-    Call Button_Import_Data()[m
[32m+[m[32m        projectfN = GetProjectFN()[m
[32m+[m[32m        If projectfN = Nothing Then Exit Sub[m
 [m
[31m-    Application.ScreenUpdating = False[m
[32m+[m[32m        Dim xlApp As New Excel.Application[m
[32m+[m[32m        Dim xlProjectWorkBook As Workbook = xlApp.Workbooks.Open(projectfN)[m
 [m
[31m-    Call Generate_Sim_Data()[m
[31m-    Call Generate_Memory_Data()[m
[31m-    Call Generate_Wire_Data()[m
[32m+[m[32m        projectBuilder = xlProjectWorkBook.Name[m
 [m
[31m-    Dim outFolder As String[m
[31m-    outFolder = Create_Output_Folder()[m
[32m+[m[32m        cpuImport = xlProjectWorkBook.Sheets("Instructions").Range("C3").Value[m
[32m+[m[32m        xlProjectWorkBook.Sheets("IO Sheets").UsedRange.Copy[m
 [m
[31m-    Call Export_CSV(outFolder, "SimData", "OPC_Tags.csv")[m
[31m-    Call Export_CSV(outFolder, "MemoryData", "GLOBAL_Tags.csv")[m
[31m-    Call Export_Wire_Data(outFolder)[m
[32m+[m[32m        ' Paste entire IO sheet[m
[32m+[m[32m        wb.Activate()[m
[32m+[m[32m        ws = wb.Sheets("IO Sheets").Select[m
[32m+[m[32m        ws.Range("A1").PasteSpecial.xlPasteValues[m
 [m
[31m-    Application.ScreenUpdating = False[m
[32m+[m[32m        ' Remove any white space at the top[m
[32m+[m[32m        Do While ws.Range("A1").Value <> "PLCBaseTag"[m
[32m+[m[32m            ws.Range("A1").EntireRow.Delete()[m
[32m+[m[32m        Loop[m
 [m
[31m-End Sub[m
[32m+[m[32m        ' Fix all selections to look nice[m
[32m+[m[32m        If wb.Sheets("Instructions").Range("CPU_PREFIX").Value = "" Then[m
[32m+[m[32m            wb.Sheets("Instructions").Range("CPU_PREFIX").Value = cpuImport[m
[32m+[m[32m        End If[m
 [m
[31m-Sub Button_Clear_All_Sheets(ByRef x As Integer)[m
[31m-    '[m
[31m-    '[m
[31m-    '[m
[31m-    'WARNING! This will clear all the data delete all Wire sheets[m
[31m-    If MsgBox("WARNING! This will clear all the data from this workbook and delete existing Wire data sheets.", vbOKCancel) = vbCancel Then Exit Sub[m
[32m+[m[32m        Reset_Sheet(wb, "Instructions")[m
[32m+[m[32m        Reset_Sheet(wb, "IO Sheets")[m
[32m+[m[32m        ws = wb.Sheets("Instructions").Select[m
 [m
[31m-    Application.ScreenUpdating = False[m
[32m+[m[32m        Call Hide_Sheets(wb)[m
 [m
[31m-    Call Button_Unhide_All_Sheets()[m
[32m+[m[32m        xlProjectWorkBook.Close(SaveChanges:=False)[m
[32m+[m[32m        wb.Application.DisplayAlerts = True 'Turn safety alerts ON[m
 [m
[31m-    Clear_All_Sheets[m
[32m+[m[32m        wb.Application.ScreenUpdating = True[m
 [m
[31m-    Call Delete_Wire_Sheets("Wire_AIn Template")[m
[31m-    Call Delete_Wire_Sheets("Wire_DIn Template")[m
[31m-    Call Delete_Wire_Sheets("Wire_ValveC Template")[m
[31m-    Call Delete_Wire_Sheets("Wire_ValveMO Template")[m
[31m-    Call Delete_Wire_Sheets("Wire_ValveSO Template")[m
[31m-    Call Delete_Wire_Sheets("Wire_Motor Template")[m
[31m-    Call Delete_Wire_Sheets("Wire_VSD Template")[m
[32m+[m[32m    End Sub[m
 [m
[31m-    Call Button_Hide_Sheets()[m
[31m-    Sheets("Instructions").Range("CPU_PREFIX").ClearContents[m
[32m+[m[32m    Sub Button_Clear_All_Sheets(ByRef wrkBook As Workbook)[m
[32m+[m[32m        '[m
[32m+[m[32m        'WARNING!!! This will clear all data AND delete all Wire sheets[m
[32m+[m[32m        If MsgBox("WARNING! This will clear all data from this workbook and delete existing Wire data sheets.", vbOKCancel) = vbCancel Then Exit Sub[m
 [m
[31m-    Application.ScreenUpdating = True[m
[32m+[m[32m        wrkBook.Application.ScreenUpdating = False[m
 [m
[31m-End Sub[m
[32m+[m[32m        Call Button_Unhide_All_Sheets(wrkBook)[m
 [m
[32m+[m[32m        Clear_All_Sheets(wrkBook)[m
[32m+[m
[32m+[m[32m        Call Delete_Wire_Sheets(wrkBook, "Wire_AIn Template")[m
[32m+[m[32m        Call Delete_Wire_Sheets(wrkBook, "Wire_DIn Template")[m
[32m+[m[32m        Call Delete_Wire_Sheets(wrkBook, "Wire_ValveC Template")[m
[32m+[m[32m        Call Delete_Wire_Sheets(wrkBook, "Wire_ValveMO Template")[m
[32m+[m[32m        Call Delete_Wire_Sheets(wrkBook, "Wire_ValveSO Template")[m
[32m+[m[32m        Call Delete_Wire_Sheets(wrkBook, "Wire_Motor Template")[m
[32m+[m[32m        Call Delete_Wire_Sheets(wrkBook, "Wire_VSD Template")[m
[32m+[m
[32m+[m[32m        Call Button_Hide_Sheets(wrkBook)[m
[32m+[m[32m        wrkBook.Sheets("Instructions").Range("CPU_PREFIX").ClearContents[m
[32m+[m
[32m+[m[32m        wrkBook.Application.ScreenUpdating = True[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Public Function GetProjectFN() As String[m
[32m+[m[32m        ' OpenFile method used to quickly open a file from the dialog box.[m[41m [m
[32m+[m[32m        ' The file Is opened In read-only mode For security purposes.[m[41m [m
[32m+[m[32m        ' To open a file In read/write mode, you must use another method, such as FileStream.[m
[32m+[m
[32m+[m[32m        Dim title, fnXtnFilter As String[m
[32m+[m
[32m+[m[32m        title = "Select Project Config File"[m
[32m+[m[32m        fnXtnFilter = "Excel files (*.xls;*.xlsm)"[m
[32m+[m
[32m+[m[32m        Dim openFileDialog1 = New OpenFileDialog()[m
[32m+[m
[32m+[m[32m        openFileDialog1.Title = title[m
[32m+[m[32m        openFileDialog1.InitialDirectory = "c:\\"[m
[32m+[m[32m        openFileDialog1.Filter = fnXtnFilter[m
[32m+[m[32m        openFileDialog1.FilterIndex = 2[m
[32m+[m[32m        openFileDialog1.RestoreDirectory = True[m
[32m+[m
[32m+[m[32m        If (openFileDialog1.ShowDialog() = DialogResult.OK) Then[m
[32m+[m[32m            GetProjectFN = openFileDialog1.FileName[m
[32m+[m[32m        Else[m
[32m+[m[32m            GetProjectFN = Nothing[m
[32m+[m
[32m+[m[32m        End If[m
[32m+[m
[32m+[m[32m    End Function[m
[32m+[m[32mEnd Module[m
\ No newline at end of file[m
[1mdiff --git a/PICS_Config_Builder/MemoryData.vb b/PICS_Config_Builder/MemoryData.vb[m
[1mindex b1834ea..09e5133 100644[m
[1m--- a/PICS_Config_Builder/MemoryData.vb[m
[1m+++ b/PICS_Config_Builder/MemoryData.vb[m
[36m@@ -1,504 +1,521 @@[m
[31m-Sub Generate_Memory_Data(ByRef x As Integer)[m
[31m-[m
[31m-    Call Unhide_All_Sheets[m
[31m-[m
[31m-    Call Clear_Sheet_Type("MemoryData")[m
[31m-    Call Clear_Sheet_Type("IOMem")[m
[31m-[m
[31m-    Call Generate_AI_Memory("IOTags - AIn", "IOMem - AIn")[m
[31m-    Call Generate_DI_Memory("IOTags - DIn", "IOMem - DIn")[m
[31m-    Call Generate_ValvesC_Memory("IOTags - ValveC", "IOMem - ValveC")[m
[31m-    Call Generate_ValvesMO_Memory("IOTags - ValveMO", "IOMem - ValveMO")[m
[31m-    Call Generate_ValvesSO_Memory("IOTags - ValveSO", "IOMem - ValveSO")[m
[31m-    Call Generate_Motor_Memory("IOTags - Motor", "IOMem - Motor")[m
[31m-    Call Generate_VSD_Memory("IOTags - VSD", "IOMem - VSD")[m
[31m-[m
[31m-    Call Remove_From_Descriptions()[m
[31m-    Call Rem_Spaces("IOMem - AIn", "F")[m
[31m-    Call Rem_Spaces("IOMem - DIn", "F")[m
[31m-    Call Rem_Spaces("IOMem - ValveC", "F")[m
[31m-    Call Rem_Spaces("IOMem - ValveMO", "F")[m
[31m-    Call Rem_Spaces("IOMem - ValveSO", "F")[m
[31m-    Call Rem_Spaces("IOMem - Motor", "F")[m
[31m-    Call Rem_Spaces("IOMem - VSD", "F")[m
[31m-[m
[31m-    Call Copy_Memory_Data()[m
[31m-[m
[31m-    Sheets("Instructions").Select[m
[31m-[m
[31m-    Call Hide_Sheets[m
[31m-[m
[31m-End Sub[m
[31m-[m
[31m-Private Function Write_Memory(destSheet As String, Optional inNum As String, Optional inName As String, _[m
[31m-                            Optional inType As String, Optional inVal As String, Optional inDesc As String)[m
[31m-[m
[31m-    Sheets(destSheet).Select[m
[31m-    RowCount = Cells(Cells.Rows.Count, "B").End(xlUp).Row[m
[31m-    Range("A" & RowCount + 1).Select[m
[31m-    [m
[31m-    Range("A" & RowCount + 1).Cells.Value = inNum[m
[31m-    Range("B" & RowCount + 1).Cells.Value = inName[m
[31m-    Range("C" & RowCount + 1).Cells.Value = inType[m
[31m-    Range("D" & RowCount + 1).Cells.Value = inVal[m
[31m-    Range("F" & RowCount + 1).Cells.Value = inDesc[m
[31m-[m
[31m-End Function[m
[31m-[m
[31m-Sub Generate_AI_Memory(sourceSheet As String, destSheet As String)[m
[31m-'[m
[31m-'[m
[31m-'   Generate AI Memory[m
[31m-    Dim IO_Number As String[m
[31m-    Dim IO_Name As String[m
[31m-    Dim IO_Type As String[m
[31m-    Dim IO_Val As String[m
[31m-    Dim IO_Addr As String[m
[31m-    Dim IO_Desc As String[m
[31m-    [m
[31m-    Sheets(sourceSheet).Select[m
[31m-    SourceRowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-    [m
[31m-    IO_Number = 0[m
[31m-[m
[31m-    For i = 2 To SourceRowCount[m
[31m-        [m
[31m-        IO_Name = Worksheets(sourceSheet).Range("A" & i).Cells.Value[m
[31m-        IO_Type = Worksheets(sourceSheet).Range("B" & i).Cells.Value[m
[31m-        IO_Val = Worksheets(sourceSheet).Range("C" & i).Cells.Value[m
[31m-        IO_Desc = Worksheets(sourceSheet).Range("E" & i).Cells.Value[m
[31m-        [m
[31m-        IO_Name = Replace(IO_Name, "_Inp_PV", "")[m
[31m-        IO_Name = Replace(IO_Name, "_Inp_AV", "")[m
[31m-        [m
[31m-        If InStr(IO_Name, "Flt") = False Then[m
[31m-            IO_Number = IO_Number + 1[m
[31m-            ' Write lines[m
[31m-            Write_Memory destSheet, IO_Number, IO_Name, IO_Type, IO_Val, IO_Desc[m
[31m-            Write_Memory destSheet, "", IO_Name & "_Flt", "B R/W", "0", IO_Desc & " IO Fault"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_OR", "F R/W", "0", IO_Desc & " Override Level"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_OR_EN", "B R/W", "0", IO_Desc & " Override Enable"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_PV_DB", "F R/W", "0.025", IO_Desc & " Noise Level"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_PV_EN", "B R/W", "0", IO_Desc & " Noise Enable Bit"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_String", "STR R/W", IO_Name, ""[m
[32m+[m
[32m+[m[32mImports Office = Microsoft.Office.Interop[m
[32m+[m[32mImports Excel = Microsoft.Office.Interop.Excel[m
[32m+[m
[32m+[m[32mModule MemoryData[m
[32m+[m
[32m+[m[32m    Const xlPasteValues As Integer = Microsoft.Office.Interop.Excel.XlPasteType.xlPasteValues[m
[32m+[m
[32m+[m[32m    Sub Generate_Memory_Data(ByRef wrkBook As Workbook)[m
[32m+[m
[32m+[m[32m        Call Unhide_All_Sheets(wrkBook)[m
[32m+[m
[32m+[m[32m        Call Clear_Sheet_Type(wrkBook, "MemoryData")[m
[32m+[m[32m        Call Clear_Sheet_Type(wrkBook, "IOMem")[m
[32m+[m
[32m+[m[32m        Call Generate_AI_Memory(wrkBook, "IOTags - AIn", "IOMem - AIn")[m
[32m+[m[32m        Call Generate_DI_Memory(wrkBook, "IOTags - DIn", "IOMem - DIn")[m
[32m+[m[32m        Call Generate_ValvesC_Memory(wrkBook, "IOTags - ValveC", "IOMem - ValveC")[m
[32m+[m[32m        Call Generate_ValvesMO_Memory(wrkBook, "IOTags - ValveMO", "IOMem - ValveMO")[m
[32m+[m[32m        Call Generate_Motor_Memory(wrkBook, "IOTags - Motor", "IOMem - Motor")[m
[32m+[m[32m        Call Generate_VSD_Memory(wrkBook, "IOTags - VSD", "IOMem - VSD")[m
[32m+[m
[32m+[m[32m        Call Remove_From_Descriptions(wrkBook)[m
[32m+[m[32m        Call Rem_Spaces(wrkBook, "IOMem - AIn", "F")[m
[32m+[m[32m        Call Rem_Spaces(wrkBook, "IOMem - DIn", "F")[m
[32m+[m[32m        Call Rem_Spaces(wrkBook, "IOMem - ValveC", "F")[m
[32m+[m[32m        Call Rem_Spaces(wrkBook, "IOMem - ValveMO", "F")[m
[32m+[m[32m        Call Rem_Spaces(wrkBook, "IOMem - ValveSO", "F")[m
[32m+[m[32m        Call Rem_Spaces(wrkBook, "IOMem - Motor", "F")[m
[32m+[m[32m        Call Rem_Spaces(wrkBook, "IOMem - VSD", "F")[m
[32m+[m
[32m+[m[32m        Call Copy_Memory_Data(wrkBook)[m
[32m+[m
[32m+[m[32m        wrkBook.Sheets("Instructions").Select()[m
[32m+[m
[32m+[m[32m        Call Hide_Sheets(wrkBook)[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Private Sub Write_Memory(ByRef wrkBook As Workbook, ByVal destSheet As String, Optional ByVal inNum As String = "", Optional ByVal inName As String = "",[m
[32m+[m[32m                             Optional ByVal inType As String = "", Optional ByVal inVal As String = "", Optional ByVal inDesc As String = "")[m
[32m+[m
[32m+[m[32m        Dim RowCount As Integer[m
[32m+[m[32m        Dim XLWorkBook As Workbook = wrkBook[m
[32m+[m[32m        Dim Wrksheet As Worksheet = XLWorkBook.Sheets(destSheet).Select[m
[32m+[m
[32m+[m[32m        RowCount = Wrksheet.Cells(Wrksheet.Rows.Count, "B").End.xlUp.Row[m
[32m+[m[32m        Wrksheet.Range("A" & RowCount + 1).Select()[m
[32m+[m
[32m+[m[32m        Wrksheet.Range("A" & RowCount + 1).Cells.Value = inNum[m
[32m+[m[32m        Wrksheet.Range("B" & RowCount + 1).Cells.Value = inName[m
[32m+[m[32m        Wrksheet.Range("C" & RowCount + 1).Cells.Value = inType[m
[32m+[m[32m        Wrksheet.Range("D" & RowCount + 1).Cells.Value = inVal[m
[32m+[m[32m        Wrksheet.Range("F" & RowCount + 1).Cells.Value = inDesc[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Sub Generate_AI_Memory(ByRef wrkBook As Workbook, sourceSheet As String, destSheet As String)[m
[32m+[m[32m        '[m
[32m+[m[32m        '   Generate AI Memory[m
[32m+[m[32m        Dim IO_Number As String[m
[32m+[m[32m        Dim IO_Name As String[m
[32m+[m[32m        Dim IO_Type As String[m
[32m+[m[32m        Dim IO_Val As String[m
[32m+[m[32m        Dim IO_Desc As String[m
[32m+[m[32m        Dim SourceRowCount As Integer[m
[32m+[m[32m        Dim XLWorkBook As Workbook = wrkBook[m
[32m+[m[32m        Dim Wrksheet As Worksheet = XLWorkBook.Sheets(sourceSheet).Select[m
[32m+[m
[32m+[m[32m        SourceRowCount = Wrksheet.Cells(Wrksheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m
[32m+[m[32m        IO_Number = 0[m
[32m+[m
[32m+[m[32m        For i = 2 To SourceRowCount[m
[32m+[m
[32m+[m[32m            IO_Name = Wrksheet.Range("A" & i).Cells.Value[m
[32m+[m[32m            IO_Type = Wrksheet.Range("B" & i).Cells.Value[m
[32m+[m[32m            IO_Val = Wrksheet.Range("C" & i).Cells.Value[m
[32m+[m[32m            IO_Desc = Wrksheet.Range("E" & i).Cells.Value[m
[32m+[m
[32m+[m[32m            IO_Name = Replace(IO_Name, "_Inp_PV", "")[m
[32m+[m[32m            IO_Name = Replace(IO_Name, "_Inp_AV", "")[m
[32m+[m
[32m+[m[32m            If InStr(IO_Name, "Flt") = False Then[m
[32m+[m[32m                IO_Number = IO_Number + 1[m
[32m+[m[32m                ' Write lines[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, IO_Number, IO_Name, IO_Type, IO_Val, IO_Desc)[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_Flt", "B R/W", "0", IO_Desc & " IO Fault")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_OR", "F R/W", "0", IO_Desc & " Override Level")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_OR_EN", "B R/W", "0", IO_Desc & " Override Enable")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_PV_DB", "F R/W", "0.025", IO_Desc & " Noise Level")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_PV_EN", "B R/W", "0", IO_Desc & " Noise Enable Bit")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_String", "STR R/W", IO_Name, "")[m
[32m+[m[32m            End If[m
[32m+[m[32m        Next[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m[32m    Sub Generate_DI_Memory(ByRef wrkBook As Workbook, sourceSheet As String, destSheet As String)[m
[32m+[m[32m        '[m
[32m+[m[32m        '   Generate DI Memory[m
[32m+[m[32m        Dim IO_Number As String[m
[32m+[m[32m        Dim IO_Name As String[m
[32m+[m[32m        Dim IO_Type As String[m
[32m+[m[32m        Dim IO_Val As String[m
[32m+[m[32m        Dim IO_Desc As String[m
[32m+[m[32m        Dim SourceRowCount As Integer[m
[32m+[m[32m        Dim XLWorkBook As Workbook = wrkBook[m
[32m+[m[32m        Dim Wrksheet As Worksheet = XLWorkBook.Sheets(sourceSheet).Select[m
[32m+[m
[32m+[m[32m        SourceRowCount = Wrksheet.Cells(Wrksheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m
[32m+[m[32m        IO_Number = 0[m
[32m+[m
[32m+[m[32m        For i = 2 To SourceRowCount[m
[32m+[m[32m            IO_Name = Wrksheet.Range("A" & i).Cells.Value[m
[32m+[m[32m            IO_Type = Wrksheet.Range("B" & i).Cells.Value[m
[32m+[m[32m            IO_Val = Wrksheet.Range("C" & i).Cells.Value[m
[32m+[m[32m            IO_Desc = Wrksheet.Range("E" & i).Cells.Value[m
[32m+[m
[32m+[m[32m            IO_Name = Replace(IO_Name, "_Inp_PV", "")[m
[32m+[m
[32m+[m[32m            If InStr(IO_Name, "Flt") = False Then[m
[32m+[m[32m                IO_Number = IO_Number + 1[m
[32m+[m
[32m+[m[32m                ' Write Lines[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, IO_Number, IO_Name, IO_Type, IO_Val, IO_Desc)[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_Flt", "B R/W", "0", IO_Desc & " IO Fault")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_String", "STR R/W", IO_Name, "")[m
[32m+[m
[32m+[m[32m            End If[m
[32m+[m[32m        Next[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m[32m    Sub Generate_ValvesC_Memory(ByRef wrkBook As Workbook, sourceSheet As String, destSheet As String)[m
[32m+[m[32m        '[m
[32m+[m[32m        '[m
[32m+[m[32m        '   Generate ValvesC Memory[m
[32m+[m[32m        Dim IO_Number As String[m
[32m+[m[32m        Dim IO_Name As String[m
[32m+[m[32m        Dim IO_Type As String[m
[32m+[m[32m        Dim IO_Val As String[m
[32m+[m[32m        Dim IO_Desc As String[m
[32m+[m[32m        Dim SourceRowCount As Integer[m
[32m+[m[32m        Dim XLWorkBook As Workbook = wrkBook[m
[32m+[m[32m        Dim Wrksheet As Worksheet = XLWorkBook.Sheets(sourceSheet).Select[m
[32m+[m
[32m+[m[32m        SourceRowCount = Wrksheet.Cells(Wrksheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m
[32m+[m[32m        IO_Number = 0[m
[32m+[m
[32m+[m[32m        For i = 2 To SourceRowCount[m
[32m+[m[32m            IO_Name = Wrksheet.Range("A" & i).Cells.Value[m
[32m+[m[32m            IO_Type = Wrksheet.Range("B" & i).Cells.Value[m
[32m+[m[32m            IO_Val = Wrksheet.Range("C" & i).Cells.Value[m
[32m+[m[32m            IO_Desc = Wrksheet.Range("E" & i).Cells.Value[m
[32m+[m
[32m+[m[32m            IO_Name = Replace(IO_Name, "_Out_CV", "")[m
[32m+[m
[32m+[m[32m            If IO_Type = "F R" Then[m
[32m+[m[32m                IO_Number = IO_Number + 1[m
[32m+[m
[32m+[m[32m                ' Write lines[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, IO_Number, IO_Name & "_Fbk_Flt", "B R/W", "0", IO_Desc & " Feedback Fault")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_OR", "F R/W", "0", IO_Desc & " Override Level")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_OR_EN", "B R/W", "0", IO_Desc & " Override Enable Bit")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_String", "STR R/W", IO_Name, "")[m
[32m+[m
[32m+[m[32m            End If[m
[32m+[m
[32m+[m[32m        Next[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m[32m    Sub Generate_ValvesMO_Memory(ByRef wrkBook As Workbook, sourceSheet As String, destSheet As String)[m
[32m+[m[32m        '[m
[32m+[m[32m        '[m
[32m+[m[32m        '   Generate ValvesSO Memory[m
[32m+[m[32m        Dim IO_Number As String[m
[32m+[m[32m        Dim IO_Name As String[m
[32m+[m[32m        Dim IO_Type As String[m
[32m+[m[32m        Dim IO_Val As String[m
[32m+[m[32m        Dim IO_Desc As String[m
[32m+[m[32m        Dim SourceRowCount As Integer[m
[32m+[m[32m        Dim XLWorkBook As Workbook = wrkBook[m
[32m+[m[32m        Dim Wrksheet As Worksheet = XLWorkBook.Sheets(sourceSheet).Select[m
[32m+[m
[32m+[m[32m        SourceRowCount = Wrksheet.Cells(Wrksheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m
[32m+[m[32m        IO_Number = 0[m
[32m+[m
[32m+[m[32m        For i = 2 To SourceRowCount[m
[32m+[m[32m            IO_Name = Wrksheet.Range("A" & i).Cells.Value[m
[32m+[m[32m            IO_Type = Wrksheet.Range("B" & i).Cells.Value[m
[32m+[m[32m            IO_Val = Wrksheet.Range("C" & i).Cells.Value[m
[32m+[m[32m            IO_Desc = Wrksheet.Range("E" & i).Cells.Value[m
[32m+[m
[32m+[m[32m            IO_Name = Replace(IO_Name, "_Out", "")[m
[32m+[m
[32m+[m[32m            If IO_Type = "B R" Then[m
[32m+[m[32m                IO_Number = IO_Number + 1[m
[32m+[m
[32m+[m[32m                ' Write lines[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, IO_Number, IO_Name & "_FTC", "B R/W", "0", IO_Desc & " Fail to Close")[m
[32m+[m[32m                Write_Memory(Wrksheet, destSheet, "", IO_Name & "_FTO", "B R/W", "0", IO_Desc & " Fail to Open")[m
[32m+[m[32m                Write_Memory(Wrksheet, destSheet, "", IO_Name & "_Stuck", "B R/W", "0", IO_Desc & " Is Stuck")[m
[32m+[m[32m                Write_Memory(Wrksheet, destSheet, "", IO_Name & "_Inp_ActuatorFault", "B R/W", "0", IO_Desc & " Act Fault")[m
[32m+[m[32m                Write_Memory(Wrksheet, destSheet, "", IO_Name & "_Inp_Hand", "B R/W", "0", IO_Desc & " Input Hand")[m
[32m+[m[32m                Write_Memory(Wrksheet, destSheet, "", IO_Name & "_String", "STR R/W", IO_Name, "")[m
[32m+[m
[32m+[m[32m            End If[m
[32m+[m
[32m+[m[32m        Next[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Sub Generate_ValvesSO_Memory(ByRef wrkBook As Workbook, sourceSheet As String, destSheet As String)[m
[32m+[m[32m        '[m
[32m+[m[32m        '   Generate ValvesSO Memory[m
[32m+[m[32m        Dim IO_Number As String[m
[32m+[m[32m        Dim IO_Name As String[m
[32m+[m[32m        Dim IO_Type As String[m
[32m+[m[32m        Dim IO_Val As String[m
[32m+[m[32m        Dim IO_Desc As String[m
[32m+[m[32m        Dim SourceRowCount As Integer[m
[32m+[m[32m        Dim XLWorkBook As Workbook = wrkBook[m
[32m+[m[32m        Dim Wrksheet As Worksheet = XLWorkBook.Sheets(sourceSheet).Select[m
[32m+[m
[32m+[m[32m        SourceRowCount = Wrksheet.Cells(Wrksheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m
[32m+[m[32m        IO_Number = 0[m
[32m+[m
[32m+[m[32m        For i = 2 To SourceRowCount[m
[32m+[m[32m            IO_Name = Wrksheet.Range("A" & i).Cells.Value[m
[32m+[m[32m            IO_Type = Wrksheet.Range("B" & i).Cells.Value[m
[32m+[m[32m            IO_Val = Wrksheet.Range("C" & i).Cells.Value[m
[32m+[m[32m            IO_Desc = Wrksheet.Range("E" & i).Cells.Value[m
[32m+[m
[32m+[m[32m            IO_Name = Replace(IO_Name, "_Out", "")[m
[32m+[m
[32m+[m[32m            If IO_Type = "B R" Then[m
[32m+[m[32m                IO_Number = IO_Number + 1[m
[32m+[m
[32m+[m[32m                ' Write lines[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, IO_Number, IO_Name & "_FTC", "B R/W", "0", IO_Desc & " Fail to Close")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_FTO", "B R/W", "0", IO_Desc & " Fail to Open")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_Inp_Hand", "B R/W", "0", IO_Desc & " Input Hand")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_Stuck", "B R/W", "0", IO_Desc & " Is Stuck")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_String", "STR R/W", IO_Name, "")[m
[32m+[m
[32m+[m[32m            End If[m
[32m+[m
[32m+[m[32m        Next[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Sub Generate_Motor_Memory(ByRef wrkBook As Workbook, sourceSheet As String, destSheet As String)[m
[32m+[m[32m        '[m
[32m+[m[32m        '   Generate Motor Memory[m
[32m+[m[32m        Dim IO_Number As String[m
[32m+[m[32m        Dim IO_Name As String[m
[32m+[m[32m        Dim IO_Type As String[m
[32m+[m[32m        Dim IO_Val As String[m
[32m+[m[32m        Dim IO_Desc As String[m
[32m+[m[32m        Dim SourceRowCount As Integer[m
[32m+[m[32m        Dim XLWorkBook As Workbook = wrkBook[m
[32m+[m[32m        Dim Wrksheet As Worksheet = XLWorkBook.Sheets(sourceSheet).Select[m
[32m+[m
[32m+[m[32m        SourceRowCount = Wrksheet.Cells(Wrksheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m
[32m+[m[32m        IO_Number = 0[m
[32m+[m
[32m+[m[32m        For i = 2 To SourceRowCount[m
[32m+[m[32m            IO_Name = Wrksheet.Range("A" & i).Cells.Value[m
[32m+[m[32m            IO_Type = Wrksheet.Range("B" & i).Cells.Value[m
[32m+[m[32m            IO_Val = Wrksheet.Range("C" & i).Cells.Value[m
[32m+[m[32m            IO_Desc = Wrksheet.Range("E" & i).Cells.Value[m
[32m+[m
[32m+[m[32m            IO_Name = Replace(IO_Name, "_Out_Run", "")[m
[32m+[m
[32m+[m[32m            If IO_Type = "B R" Then[m
[32m+[m[32m                IO_Number = IO_Number + 1[m
[32m+[m
[32m+[m[32m                ' Write lines[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, IO_Number, IO_Name & "_Inp_Faulted", "B R/W", "0", IO_Desc & " Faulted")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_FTR", "B R/W", "0", IO_Desc & " Fail to Run")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_FTS", "B R/W", "0", IO_Desc & " Fail to Stop")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_Inp_Hand", "B R/W", "0", IO_Desc & " Input Hand")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_OverLoad", "B R/W", "0", IO_Desc & " OverLoad")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_String", "STR R/W", IO_Name, "")[m
[32m+[m
[32m+[m[32m            End If[m
[32m+[m[32m        Next[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m[32m    Sub Generate_VSD_Memory(ByRef wrkBook As Workbook, sourceSheet As String, destSheet As String)[m
[32m+[m[32m        '[m
[32m+[m[32m        '   Generate Motor Memory[m
[32m+[m[32m        Dim IO_Number As String[m
[32m+[m[32m        Dim IO_Name As String[m
[32m+[m[32m        Dim IO_Type As String[m
[32m+[m[32m        Dim IO_Val As String[m
[32m+[m[32m        Dim IO_Desc As String[m
[32m+[m[32m        Dim SourceRowCount As Integer[m
[32m+[m[32m        Dim XLWorkBook As Workbook = wrkBook[m
[32m+[m[32m        Dim Wrksheet As Worksheet = XLWorkBook.Sheets(sourceSheet).Select[m
[32m+[m
[32m+[m[32m        SourceRowCount = Wrksheet.Cells(Wrksheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m
[32m+[m[32m        IO_Number = 0[m
[32m+[m
[32m+[m[32m        For i = 2 To SourceRowCount[m
[32m+[m[32m            IO_Name = Wrksheet.Range("A" & i).Cells.Value[m
[32m+[m[32m            IO_Type = Wrksheet.Range("B" & i).Cells.Value[m
[32m+[m[32m            IO_Val = Wrksheet.Range("C" & i).Cells.Value[m
[32m+[m[32m            IO_Desc = Wrksheet.Range("E" & i).Cells.Value[m
[32m+[m
[32m+[m[32m            IO_Name = Replace(IO_Name, "_Out_Run", "")[m
[32m+[m
[32m+[m[32m            If IO_Type = "B R" Then[m
[32m+[m[32m                IO_Number = IO_Number + 1[m
[32m+[m
[32m+[m[32m                ' Write lines[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, IO_Number, IO_Name & "_Inp_Faulted", "B R/W", "0", IO_Desc & " Faulted")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_FTR", "B R/W", "0", IO_Desc & " Fail to Run")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_FTS", "B R/W", "0", IO_Desc & " Fail to Stop")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_Inp_Hand", "B R/W", "0", IO_Desc & " Input Hand")[m
[32m+[m[32m                Write_Memory(wrkBook, destSheet, "", IO_Name & "_String", "STR R/W", IO_Name, "")[m
[32m+[m
[32m+[m[32m            End If[m
[32m+[m[32m        Next[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Sub Copy_Memory_Data(ByRef wrkBook As Workbook)[m
[32m+[m[32m        '[m
[32m+[m[32m        'Clear MemoryData sheet[m
[32m+[m
[32m+[m[32m        Dim XLWorkBook As Workbook = wrkBook[m
[32m+[m[32m        Dim Wrksheet As Worksheet = XLWorkBook.Sheets("MemoryData").Select[m
[32m+[m[32m        Wrksheet.Range("A2:F9999").Clear()[m
[32m+[m
[32m+[m[32m        'Copy AIn Memory Data[m
[32m+[m[32m        Wrksheet = XLWorkBook.Sheets("IOMem - AIn").Select[m
[32m+[m[32m        Dim RowCount As Integer = Wrksheet.Cells(Wrksheet.Rows.Count, "B").End.xlUp.Row[m
[32m+[m
[32m+[m[32m        If RowCount > 1 Then[m
[32m+[m[32m            Wrksheet.Range("B2:F" & RowCount).Copy()[m
[32m+[m
[32m+[m[32m            'Paste data into MemoryData sheet[m
[32m+[m[32m            Wrksheet = XLWorkBook.Sheets("MemoryData").Select[m
[32m+[m[32m            Wrksheet.Range("A2").PasteSpecial(Paste:=xlPasteValues)[m
         End If[m
[31m-    Next[m
[31m-[m
[31m-End Sub[m
[31m-Sub Generate_DI_Memory(sourceSheet As String, destSheet As String)[m
[31m-'[m
[31m-'[m
[31m-'   Generate DI Memory[m
[31m-    Dim IO_Number As String[m
[31m-    Dim IO_Name As String[m
[31m-    Dim IO_Type As String[m
[31m-    Dim IO_Val As String[m
[31m-    Dim IO_Addr As String[m
[31m-    Dim IO_Desc As String[m
[31m-        [m
[31m-    Sheets(sourceSheet).Select[m
[31m-    SourceRowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-    [m
[31m-    IO_Number = 0[m
[31m-[m
[31m-    For i = 2 To SourceRowCount[m
[31m-        IO_Name = Worksheets(sourceSheet).Range("A" & i).Cells.Value[m
[31m-        IO_Type = Worksheets(sourceSheet).Range("B" & i).Cells.Value[m
[31m-        IO_Val = Worksheets(sourceSheet).Range("C" & i).Cells.Value[m
[31m-        IO_Desc = Worksheets(sourceSheet).Range("E" & i).Cells.Value[m
[31m-        [m
[31m-        IO_Name = Replace(IO_Name, "_Inp_PV", "")[m
[31m-    [m
[31m-        If InStr(IO_Name, "Flt") = False Then[m
[31m-            IO_Number = IO_Number + 1[m
[31m-            [m
[31m-            ' Write Lines[m
[31m-            Write_Memory destSheet, IO_Number, IO_Name, IO_Type, IO_Val, IO_Desc[m
[31m-            Write_Memory destSheet, "", IO_Name & "_Flt", "B R/W", "0", IO_Desc & " IO Fault"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_String", "STR R/W", IO_Name, ""[m
[31m-            [m
[32m+[m
[32m+[m[32m        'Copy DIn Memory Data[m
[32m+[m[32m        Wrksheet = XLWorkBook.Sheets("IOMem - DIn").Select[m
[32m+[m[32m        RowCount = Wrksheet.Cells(Wrksheet.Rows.Count, "B").End.xlUp.Row[m
[32m+[m
[32m+[m[32m        If RowCount > 1 Then[m
[32m+[m[32m            Wrksheet.Range("B2:F" & RowCount).Copy()[m
[32m+[m
[32m+[m[32m            'Paste data into MemoryData sheet[m
[32m+[m[32m            Wrksheet = XLWorkBook.Sheets("MemoryData").Select[m
[32m+[m[32m            Dim MemRowCount As Integer = Wrksheet.Cells(Wrksheet.Rows.Count, "B").End.xlUp.Row[m
[32m+[m[32m            Dim MemRow As Integer = MemRowCount + 1[m
[32m+[m[32m            Wrksheet.Range("A" & MemRow).PasteSpecial(Paste:=xlPasteValues)[m
         End If[m
[31m-    Next[m
[31m-[m
[31m-End Sub[m
[31m-Sub Generate_ValvesC_Memory(sourceSheet As String, destSheet As String)[m
[31m-'[m
[31m-'[m
[31m-'   Generate ValvesC Memory[m
[31m-    Dim IO_Number As String[m
[31m-    Dim IO_Name As String[m
[31m-    Dim IO_Type As String[m
[31m-    Dim IO_Val As String[m
[31m-    Dim IO_Addr As String[m
[31m-    Dim IO_Desc As String[m
[31m-        [m
[31m-    Sheets(sourceSheet).Select[m
[31m-    SourceRowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-    [m
[31m-    IO_Number = 0[m
[31m-[m
[31m-    For i = 2 To SourceRowCount[m
[31m-        IO_Name = Worksheets(sourceSheet).Range("A" & i).Cells.Value[m
[31m-        IO_Type = Worksheets(sourceSheet).Range("B" & i).Cells.Value[m
[31m-        IO_Val = Worksheets(sourceSheet).Range("C" & i).Cells.Value[m
[31m-        IO_Desc = Worksheets(sourceSheet).Range("E" & i).Cells.Value[m
[31m-        [m
[31m-        IO_Name = Replace(IO_Name, "_Out_CV", "")[m
[31m-        [m
[31m-        If IO_Type = "F R" Then[m
[31m-            IO_Number = IO_Number + 1[m
[31m-            [m
[31m-            ' Write lines[m
[31m-            Write_Memory destSheet, IO_Number, IO_Name & "_Fbk_Flt", "B R/W", "0", IO_Desc & " Feedback Fault"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_OR", "F R/W", "0", IO_Desc & " Override Level"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_OR_EN", "B R/W", "0", IO_Desc & " Override Enable Bit"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_String", "STR R/W", IO_Name, ""[m
[31m-            [m
[32m+[m
[32m+[m[32m        'Copy ValveC Memory Data[m
[32m+[m[32m        Wrksheet = XLWorkBook.Sheets("IOMem - ValveC").Select[m
[32m+[m[32m        RowCount = Wrksheet.Cells(Wrksheet.Rows.Count, "B").End.xlUp.Row[m
[32m+[m[32m        If RowCount > 1 Then[m
[32m+[m[32m            Wrksheet.Range("B2:F" & RowCount).Copy()[m
[32m+[m
[32m+[m[32m            'Paste data into MemoryData sheet[m
[32m+[m[32m            Wrksheet = XLWorkBook.Sheets("MemoryData").Select[m
[32m+[m[32m            Dim MemRowCount As Integer = Wrksheet.Cells(Wrksheet.Rows.Count, "B").End.xlUp.Row[m
[32m+[m[32m            Dim MemRow As Integer = MemRowCount + 1[m
[32m+[m[32m            Wrksheet.Range("A" & MemRow).PasteSpecial(Paste:=xlPasteValues)[m
         End If[m
[31m-        [m
[31m-        Next[m
 [m
[31m-End Sub[m
[31m-Sub Generate_ValvesMO_Memory(sourceSheet As String, destSheet As String)[m
[31m-'[m
[31m-'[m
[31m-'   Generate ValvesSO Memory[m
[31m-    Dim IO_Number As String[m
[31m-    Dim IO_Name As String[m
[31m-    Dim IO_Type As String[m
[31m-    Dim IO_Val As String[m
[31m-    Dim IO_Addr As String[m
[31m-    Dim IO_Desc As String[m
[31m-        [m
[31m-    Sheets(sourceSheet).Select[m
[31m-    SourceRowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-    [m
[31m-    IO_Number = 0[m
[31m-[m
[31m-    For i = 2 To SourceRowCount[m
[31m-        IO_Name = Worksheets(sourceSheet).Range("A" & i).Cells.Value[m
[31m-        IO_Type = Worksheets(sourceSheet).Range("B" & i).Cells.Value[m
[31m-        IO_Val = Worksheets(sourceSheet).Range("C" & i).Cells.Value[m
[31m-        IO_Desc = Worksheets(sourceSheet).Range("E" & i).Cells.Value[m
[31m-    [m
[31m-        IO_Name = Replace(IO_Name, "_Out", "")[m
[31m-    [m
[31m-        If IO_Type = "B R" Then[m
[31m-            IO_Number = IO_Number + 1[m
[31m-            [m
[31m-            ' Write lines[m
[31m-            Write_Memory destSheet, IO_Number, IO_Name & "_FTC", "B R/W", "0", IO_Desc & " Fail to Close"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_FTO", "B R/W", "0", IO_Desc & " Fail to Open"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_Stuck", "B R/W", "0", IO_Desc & " Is Stuck"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_Inp_ActuatorFault", "B R/W", "0", IO_Desc & " Act Fault"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_Inp_Hand", "B R/W", "0", IO_Desc & " Input Hand"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_String", "STR R/W", IO_Name, ""[m
[31m-            [m
[32m+[m[32m        'Copy ValveMO Memory Data[m
[32m+[m[32m        Wrksheet = XLWorkBook.Sheets("IOMem - ValveMO").Select[m
[32m+[m[32m        RowCount = Wrksheet.Cells(Wrksheet.Rows.Count, "B").End.xlUp.Row[m
[32m+[m[32m        If RowCount > 1 Then[m
[32m+[m[32m            Wrksheet.Range("B2:F" & RowCount).Copy()[m
[32m+[m
[32m+[m[32m            'Paste data into MemoryData sheet[m
[32m+[m[32m            Wrksheet = XLWorkBook.Sheets("MemoryData").Select[m
[32m+[m[32m            Dim MemRowCount As Integer = Wrksheet.Cells(Wrksheet.Rows.Count, "B").End.xlUp.Row[m
[32m+[m[32m            Dim MemRow As Integer = MemRowCount + 1[m
[32m+[m[32m            Wrksheet.Range("A" & MemRow).PasteSpecial(Paste:=xlPasteValues)[m
         End If[m
[31m-        [m
[31m-    Next[m
[31m-[m
[31m-End Sub[m
[31m-[m
[31m-Sub Generate_ValvesSO_Memory(sourceSheet As String, destSheet As String)[m
[31m-'[m
[31m-'[m
[31m-'   Generate ValvesSO Memory[m
[31m-    Dim IO_Number As String[m
[31m-    Dim IO_Name As String[m
[31m-    Dim IO_Type As String[m
[31m-    Dim IO_Val As String[m
[31m-    Dim IO_Addr As String[m
[31m-    Dim IO_Desc As String[m
[31m-        [m
[31m-    Sheets(sourceSheet).Select[m
[31m-    SourceRowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-    [m
[31m-    IO_Number = 0[m
[31m-[m
[31m-    For i = 2 To SourceRowCount[m
[31m-        IO_Name = Worksheets(sourceSheet).Range("A" & i).Cells.Value[m
[31m-        IO_Type = Worksheets(sourceSheet).Range("B" & i).Cells.Value[m
[31m-        IO_Val = Worksheets(sourceSheet).Range("C" & i).Cells.Value[m
[31m-        IO_Desc = Worksheets(sourceSheet).Range("E" & i).Cells.Value[m
[31m-    [m
[31m-        IO_Name = Replace(IO_Name, "_Out", "")[m
[31m-    [m
[31m-        If IO_Type = "B R" Then[m
[31m-            IO_Number = IO_Number + 1[m
[31m-            [m
[31m-            ' Write lines[m
[31m-            Write_Memory destSheet, IO_Number, IO_Name & "_FTC", "B R/W", "0", IO_Desc & " Fail to Close"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_FTO", "B R/W", "0", IO_Desc & " Fail to Open"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_Inp_Hand", "B R/W", "0", IO_Desc & " Input Hand"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_Stuck", "B R/W", "0", IO_Desc & " Is Stuck"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_String", "STR R/W", IO_Name, ""[m
[31m-            [m
[32m+[m
[32m+[m[32m        'Copy ValveSO Memory Data[m
[32m+[m[32m        Wrksheet = XLWorkBook.Sheets("IOMem - ValveSO").Select[m
[32m+[m[32m        RowCount = Wrksheet.Cells(Wrksheet.Rows.Count, "B").End.xlUp.Row[m
[32m+[m[32m        If RowCount > 1 Then[m
[32m+[m[32m            Wrksheet.Range("B2:F" & RowCount).Copy()[m
[32m+[m
[32m+[m[32m            'Paste data into MemoryData sheet[m
[32m+[m[32m            Wrksheet = XLWorkBook.Sheets("MemoryData").Select[m
[32m+[m[32m            Dim MemRowCount As Integer = Wrksheet.Cells(Wrksheet.Rows.Count, "B").End.xlUp.Row[m
[32m+[m[32m            Dim MemRow As Integer = MemRowCount + 1[m
[32m+[m[32m            Wrksheet.Range("A" & MemRow).PasteSpecial(Paste:=xlPasteValues)[m
         End If[m
[31m-        [m
[31m-    Next[m
[31m-[m
[31m-End Sub[m
[31m-[m
[31m-Sub Generate_Motor_Memory(sourceSheet As String, destSheet As String)[m
[31m-'[m
[31m-'[m
[31m-'   Generate Motor Memory[m
[31m-    Dim IO_Number As String[m
[31m-    Dim IO_Name As String[m
[31m-    Dim IO_Type As String[m
[31m-    Dim IO_Val As String[m
[31m-    Dim IO_Addr As String[m
[31m-    Dim IO_Desc As String[m
[31m-        [m
[31m-    Sheets(sourceSheet).Select[m
[31m-    SourceRowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-    [m
[31m-    IO_Number = 0[m
[31m-[m
[31m-    For i = 2 To SourceRowCount[m
[31m-        IO_Name = Worksheets(sourceSheet).Range("A" & i).Cells.Value[m
[31m-        IO_Type = Worksheets(sourceSheet).Range("B" & i).Cells.Value[m
[31m-        IO_Val = Worksheets(sourceSheet).Range("C" & i).Cells.Value[m
[31m-        IO_Desc = Worksheets(sourceSheet).Range("E" & i).Cells.Value[m
[31m-    [m
[31m-        IO_Name = Replace(IO_Name, "_Out_Run", "")[m
[31m-    [m
[31m-        If IO_Type = "B R" Then[m
[31m-            IO_Number = IO_Number + 1[m
[31m-        [m
[31m-            ' Write lines[m
[31m-            Write_Memory destSheet, IO_Number, IO_Name & "_Inp_Faulted", "B R/W", "0", IO_Desc & " Faulted"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_FTR", "B R/W", "0", IO_Desc & " Fail to Run"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_FTS", "B R/W", "0", IO_Desc & " Fail to Stop"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_Inp_Hand", "B R/W", "0", IO_Desc & " Input Hand"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_OverLoad", "B R/W", "0", IO_Desc & " OverLoad"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_String", "STR R/W", IO_Name, ""[m
[31m-            [m
[32m+[m
[32m+[m[32m        'Copy Motor Memory Data[m
[32m+[m[32m        Wrksheet = XLWorkBook.Sheets("IOMem - Motor").Select[m
[32m+[m[32m        RowCount = Wrksheet.Cells(Wrksheet.Rows.Count, "B").End.xlUp.Row[m
[32m+[m[32m        If RowCount > 1 Then[m
[32m+[m[32m            Wrksheet.Range("B2:F" & RowCount).Copy()[m
[32m+[m
[32m+[m[32m            'Paste data into MemoryData sheet[m
[32m+[m[32m            Wrksheet = XLWorkBook.Sheets("MemoryData").Select[m
[32m+[m[32m            Dim MemRowCount As Integer = Wrksheet.Cells(Wrksheet.Rows.Count, "B").End.xlUp.Row[m
[32m+[m[32m            Dim MemRow As Integer = MemRowCount + 1[m
[32m+[m[32m            Wrksheet.Range("A" & MemRow).PasteSpecial(Paste:=xlPasteValues)[m
         End If[m
[31m-    Next[m
[31m-[m
[31m-End Sub[m
[31m-Sub Generate_VSD_Memory(sourceSheet As String, destSheet As String)[m
[31m-'[m
[31m-'[m
[31m-'   Generate Motor Memory[m
[31m-    Dim IO_Number As String[m
[31m-    Dim IO_Name As String[m
[31m-    Dim IO_Type As String[m
[31m-    Dim IO_Val As String[m
[31m-    Dim IO_Addr As String[m
[31m-    Dim IO_Desc As String[m
[31m-        [m
[31m-    Sheets(sourceSheet).Select[m
[31m-    SourceRowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-    [m
[31m-    IO_Number = 0[m
[31m-[m
[31m-    For i = 2 To SourceRowCount[m
[31m-        IO_Name = Worksheets(sourceSheet).Range("A" & i).Cells.Value[m
[31m-        IO_Type = Worksheets(sourceSheet).Range("B" & i).Cells.Value[m
[31m-        IO_Val = Worksheets(sourceSheet).Range("C" & i).Cells.Value[m
[31m-        IO_Desc = Worksheets(sourceSheet).Range("E" & i).Cells.Value[m
[31m-        [m
[31m-        IO_Name = Replace(IO_Name, "_Out_Run", "")[m
[31m-        [m
[31m-        If IO_Type = "B R" Then[m
[31m-            IO_Number = IO_Number + 1[m
[31m-            [m
[31m-            ' Write lines[m
[31m-            Write_Memory destSheet, IO_Number, IO_Name & "_Inp_Faulted", "B R/W", "0", IO_Desc & " Faulted"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_FTR", "B R/W", "0", IO_Desc & " Fail to Run"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_FTS", "B R/W", "0", IO_Desc & " Fail to Stop"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_Inp_Hand", "B R/W", "0", IO_Desc & " Input Hand"[m
[31m-            Write_Memory destSheet, "", IO_Name & "_String", "STR R/W", IO_Name, ""[m
[31m-            [m
[32m+[m
[32m+[m[32m        'Copy VSD Memory Data[m
[32m+[m[32m        Wrksheet = XLWorkBook.Sheets("IOMem - VSD").Select[m
[32m+[m[32m        RowCount = Wrksheet.Cells(Wrksheet.Rows.Count, "B").End.xlUp.Row[m
[32m+[m[32m        If RowCount > 1 Then[m
[32m+[m[32m            Wrksheet.Range("B2:F" & RowCount).Copy()[m
[32m+[m[32m            Wrksheet.Range("A1").Select()[m
[32m+[m
[32m+[m[32m            Wrksheet = XLWorkBook.Sheets("MemoryData").Select[m
[32m+[m[32m            Dim MemRowCount As Integer = Wrksheet.Cells(Wrksheet.Rows.Count, "B").End.xlUp.Row[m
[32m+[m[32m            Dim MemRow As Integer = MemRowCount + 1[m
[32m+[m[32m            Wrksheet.Range("A" & MemRow).PasteSpecialPaste(Paste:=xlPasteValues)[m
         End If[m
[31m-    Next[m
[31m-[m
[31m-End Sub[m
[31m-[m
[31m-Sub Copy_Memory_Data(ByRef x As Integer)[m
[31m-    '[m
[31m-    '[m
[31m-    '[m
[31m-    'Clear MemoryData sheet[m
[31m-    Sheets("MemoryData").Select[m
[31m-    Range("A2:F9999").Clear[m
[31m-[m
[31m-    'Copy AIn Memory Data[m
[31m-    Sheets("IOMem - AIn").Select[m
[31m-    RowCount = Cells(Cells.Rows.Count, "B").End(xlUp).Row[m
[31m-    If RowCount > 1 Then[m
[31m-        Range("B2:F" & RowCount).Copy[m
[31m-[m
[31m-        'Paste data into MemoryData sheet[m
[31m-        Sheets("MemoryData").Select[m
[31m-        Range("A2").PasteSpecial(xlPasteValues)[m
[31m-    End If[m
[31m-[m
[31m-    'Copy DIn Memory Data[m
[31m-    Sheets("IOMem - DIn").Select[m
[31m-    RowCount = Cells(Cells.Rows.Count, "B").End(xlUp).Row[m
[31m-    If RowCount > 1 Then[m
[31m-        Range("B2:F" & RowCount).Copy[m
[31m-[m
[31m-        'Paste data into MemoryData sheet[m
[31m-        Sheets("MemoryData").Select[m
[31m-        MemRowCount = Cells(Cells.Rows.Count, "B").End(xlUp).Row[m
[31m-        MemRow = MemRowCount + 1[m
[31m-        Range("A" & MemRow).PasteSpecial(xlPasteValues)[m
[31m-    End If[m
[31m-[m
[31m-    'Copy ValveC Memory Data[m
[31m-    Sheets("IOMem - ValveC").Select[m
[31m-    RowCount = Cells(Cells.Rows.Count, "B").End(xlUp).Row[m
[31m-    If RowCount > 1 Then[m
[31m-        Range("B2:F" & RowCount).Copy[m
[31m-[m
[31m-        'Paste data into MemoryData sheet[m
[31m-        Sheets("MemoryData").Select[m
[31m-        MemRowCount = Cells(Cells.Rows.Count, "B").End(xlUp).Row[m
[31m-        MemRow = MemRowCount + 1[m
[31m-        Range("A" & MemRow).PasteSpecial(xlPasteValues)[m
[31m-    End If[m
[31m-[m
[31m-    'Copy ValveMO Memory Data[m
[31m-    Sheets("IOMem - ValveMO").Select[m
[31m-    RowCount = Cells(Cells.Rows.Count, "B").End(xlUp).Row[m
[31m-    If RowCount > 1 Then[m
[31m-        Range("B2:F" & RowCount).Copy[m
[31m-[m
[31m-        'Paste data into MemoryData sheet[m
[31m-        Sheets("MemoryData").Select[m
[31m-        MemRowCount = Cells(Cells.Rows.Count, "B").End(xlUp).Row[m
[31m-        MemRow = MemRowCount + 1[m
[31m-        Range("A" & MemRow).PasteSpecial(xlPasteValues)[m
[31m-    End If[m
[31m-[m
[31m-    'Copy ValveSO Memory Data[m
[31m-    Sheets("IOMem - ValveSO").Select[m
[31m-    RowCount = Cells(Cells.Rows.Count, "B").End(xlUp).Row[m
[31m-    If RowCount > 1 Then[m
[31m-        Range("B2:F" & RowCount).Copy[m
[31m-[m
[31m-        'Paste data into MemoryData sheet[m
[31m-        Sheets("MemoryData").Select[m
[31m-        MemRowCount = Cells(Cells.Rows.Count, "B").End(xlUp).Row[m
[31m-        MemRow = MemRowCount + 1[m
[31m-        Range("A" & MemRow).PasteSpecial(xlPasteValues)[m
[31m-    End If[m
[31m-[m
[31m-    'Copy Motor Memory Data[m
[31m-    Sheets("IOMem - Motor").Select[m
[31m-    RowCount = Cells(Cells.Rows.Count, "B").End(xlUp).Row[m
[31m-    If RowCount > 1 Then[m
[31m-        Range("B2:F" & RowCount).Copy[m
[31m-[m
[31m-        'Paste data into MemoryData sheet[m
[31m-        Sheets("MemoryData").Select[m
[31m-        MemRowCount = Cells(Cells.Rows.Count, "B").End(xlUp).Row[m
[31m-        MemRow = MemRowCount + 1[m
[31m-        Range("A" & MemRow).PasteSpecial(xlPasteValues)[m
[31m-    End If[m
[31m-[m
[31m-    'Copy VSD Memory Data[m
[31m-    Sheets("IOMem - VSD").Select[m
[31m-    RowCount = Cells(Cells.Rows.Count, "B").End(xlUp).Row[m
[31m-    If RowCount > 1 Then[m
[31m-        Range("B2:F" & RowCount).Copy[m
[31m-        Range("A1").Select[m
[31m-[m
[31m-        Sheets("MemoryData").Select[m
[31m-        MemRowCount = Cells(Cells.Rows.Count, "B").End(xlUp).Row[m
[31m-        MemRow = MemRowCount + 1[m
[31m-        Range("A" & MemRow).PasteSpecial(xlPasteValues)[m
[31m-    End If[m
[31m-[m
[31m-    Range("A1").Select[m
[31m-    Application.CutCopyMode = False[m
[31m-[m
[31m-End Sub[m
[31m-Sub Remove_From_Descriptions(ByRef x As Integer)[m
[31m-    '[m
[31m-    '[m
[31m-    '[m
[31m-    Dim Keyword As String[m
[31m-[m
[31m-    ' Remove keywords from ValveC Memory[m
[31m-    Sheets("IOMem - ValveC").Select[m
[31m-    For i = 10 To 17    'Data is in rows 10 to 17[m
[31m-        Keyword = Worksheets("Instructions").Range("C" & i).Cells.Value[m
[31m-        If Keyword <> "" Then[m
[31m-            Columns("F").Replace What:=" " & Keyword,[m
[32m+[m
[32m+[m[32m        Wrksheet.Range("A1").Select()[m
[32m+[m[32m        XLWorkBook.Application.CutCopyMode = False[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Sub Remove_From_Descriptions(ByRef XLWorkBook As Workbook)[m
[32m+[m[32m        '[m
[32m+[m[32m        Dim WrkBook As Workbook = XLWorkBook[m
[32m+[m[32m        Dim WrkSheet As Worksheet[m
[32m+[m[32m        Dim Keyword As String[m
[32m+[m
[32m+[m[32m        ' Remove keywords from ValveC Memory[m
[32m+[m[32m        WrkSheet = WrkBook.Sheets("IOMem - ValveC").Select[m
[32m+[m[32m        For i = 10 To 17    'Data is in rows 10 to 17[m
[32m+[m[32m            Keyword = WrkBook.Sheets("Instructions").Range("C" & i).Cells.Value[m
[32m+[m[32m            If Keyword <> "" Then[m
[32m+[m[32m                WrkSheet.Columns("F").Replace(What:=" " & Keyword,[m
                         Replacement:="",[m
[31m-                        LookAt:=xlPart,[m
[31m-                        SearchOrder:=xlByRows,[m
[32m+[m[32m                        LookAt:="XlPart",[m
[32m+[m[32m                        SearchOrder:="XlByRows",[m
                         MatchCase:=False,[m
                         SearchFormat:=False,[m
[31m-                        ReplaceFormat:=False[m
[31m-        End If[m
[31m-    Next[m
[31m-[m
[31m-    ' Remove keywords from ValveSO_MO Memory[m
[31m-    Sheets("IOMem - ValveMO").Select[m
[31m-    For i = 10 To 17    'Data is in rows 10 to 17[m
[31m-        Keyword = Worksheets("Instructions").Range("D" & i).Cells.Value[m
[31m-        If Keyword <> "" Then[m
[31m-            Columns("F").Replace What:=" " & Keyword,[m
[32m+[m[32m                        ReplaceFormat:=False)[m
[32m+[m[32m            End If[m
[32m+[m[32m        Next[m
[32m+[m
[32m+[m[32m        ' Remove keywords from ValveSO_MO Memory[m
[32m+[m[32m        WrkSheet = WrkBook.Sheets("IOMem - ValveMO").Select[m
[32m+[m[32m        For i = 10 To 17    'Data is in rows 10 to 17[m
[32m+[m[32m            Keyword = WrkBook.Sheets("Instructions").Range("D" & i).Cells.Value[m
[32m+[m[32m            If Keyword <> "" Then[m
[32m+[m[32m                WrkSheet.Columns("F").Replace(What:=" " & Keyword,[m
                         Replacement:="",[m
[31m-                        LookAt:=xlPart,[m
[31m-                        SearchOrder:=xlByRows,[m
[32m+[m[32m                        LookAt:="xlPart",[m
[32m+[m[32m                        SearchOrder:="xlByRows",[m
                         MatchCase:=False,[m
                         SearchFormat:=False,[m
[31m-                        ReplaceFormat:=False[m
[31m-        End If[m
[31m-    Next[m
[31m-[m
[31m-    ' Remove keywords from ValveSO_MO Memory[m
[31m-    Sheets("IOMem - ValveSO").Select[m
[31m-    For i = 10 To 17    'Data is in rows 10 to 17[m
[31m-        Keyword = Worksheets("Instructions").Range("D" & i).Cells.Value[m
[31m-        If Keyword <> "" Then[m
[31m-            Columns("F").Replace What:=" " & Keyword,[m
[32m+[m[32m                        ReplaceFormat:=False)[m
[32m+[m[32m            End If[m
[32m+[m[32m        Next[m
[32m+[m
[32m+[m[32m        ' Remove keywords from ValveSO_MO Memory[m
[32m+[m[32m        WrkSheet = WrkBook.Sheets("IOMem - ValveSO").Select[m
[32m+[m[32m        For i = 10 To 17    'Data is in rows 10 to 17[m
[32m+[m[32m            Keyword = WrkBook.Sheets("Instructions").Range("D" & i).Cells.Value[m
[32m+[m[32m            If Keyword <> "" Then[m
[32m+[m[32m                WrkSheet.Columns("F").Replace(What:=" " & Keyword,[m
                         Replacement:="",[m
[31m-                        LookAt:=xlPart,[m
[31m-                        SearchOrder:=xlByRows,[m
[32m+[m[32m                        LookAt:="xlPart",[m
[32m+[m[32m                        SearchOrder:="xlByRows",[m
                         MatchCase:=False,[m
                         SearchFormat:=False,[m
[31m-                        ReplaceFormat:=False[m
[31m-        End If[m
[31m-    Next[m
[31m-[m
[31m-    ' Remove keywords from Motor Memory[m
[31m-    Sheets("IOMem - Motor").Select[m
[31m-    For i = 10 To 17    'Data is in rows 10 to 17[m
[31m-        Keyword = Worksheets("Instructions").Range("E" & i).Cells.Value[m
[31m-        If Keyword <> "" Then[m
[31m-            Columns("F").Replace What:=" " & Keyword,[m
[32m+[m[32m                        ReplaceFormat:=False)[m
[32m+[m[32m            End If[m
[32m+[m[32m        Next[m
[32m+[m
[32m+[m[32m        ' Remove keywords from Motor Memory[m
[32m+[m[32m        WrkSheet = WrkBook.Sheets("IOMem - Motor").Select[m
[32m+[m[32m        For i = 10 To 17    'Data is in rows 10 to 17[m
[32m+[m[32m            Keyword = WrkBook.Sheets("Instructions").Range("E" & i).Cells.Value[m
[32m+[m[32m            If Keyword <> "" Then[m
[32m+[m[32m                WrkSheet.Columns("F").Replace(What:=" " & Keyword,[m
                         Replacement:="",[m
[31m-                        LookAt:=xlPart,[m
[31m-                        SearchOrder:=xlByRows,[m
[32m+[m[32m                        LookAt:="xlPart",[m
[32m+[m[32m                        SearchOrder:="xlByRows",[m
                         MatchCase:=False,[m
                         SearchFormat:=False,[m
[31m-                        ReplaceFormat:=False[m
[31m-        End If[m
[31m-    Next[m
[31m-[m
[31m-    ' Remove keywords from VSD Memory[m
[31m-    Sheets("IOMem - VSD").Select[m
[31m-    For i = 10 To 17    'Data is in rows 10 to 17[m
[31m-        Keyword = Worksheets("Instructions").Range("F" & i).Cells.Value[m
[31m-        If Keyword <> "" Then[m
[31m-            Columns("F").Replace What:=" " & Keyword,[m
[32m+[m[32m                        ReplaceFormat:=False)[m
[32m+[m[32m            End If[m
[32m+[m[32m        Next[m
[32m+[m
[32m+[m[32m        ' Remove keywords from VSD Memory[m
[32m+[m[32m        WrkSheet = WrkBook.Sheets("IOMem - VSD").Select[m
[32m+[m[32m        For i = 10 To 17    'Data is in rows 10 to 17[m
[32m+[m[32m            Keyword = WrkBook.Sheets("Instructions").Range("F" & i).Cells.Value[m
[32m+[m[32m            If Keyword <> "" Then[m
[32m+[m[32m                WrkSheet.Columns("F").Replace(What:=" " & Keyword,[m
                         Replacement:="",[m
[31m-                        LookAt:=xlPart,[m
[31m-                        SearchOrder:=xlByRows,[m
[32m+[m[32m                        LookAt:="xlPart",[m
[32m+[m[32m                        SearchOrder:="xlByRows",[m
                         MatchCase:=False,[m
                         SearchFormat:=False,[m
[31m-                        ReplaceFormat:=False[m
[31m-        End If[m
[31m-    Next[m
[32m+[m[32m                        ReplaceFormat:=False)[m
[32m+[m[32m            End If[m
[32m+[m[32m        Next[m
[32m+[m
 [m
[32m+[m[32m    End Sub[m
 [m
[31m-End Sub[m
[32m+[m[32mEnd Module[m
[1mdiff --git a/PICS_Config_Builder/PICS_Config_Builder.vbproj b/PICS_Config_Builder/PICS_Config_Builder.vbproj[m
[1mindex 469f954..8fa12b1 100644[m
[1m--- a/PICS_Config_Builder/PICS_Config_Builder.vbproj[m
[1m+++ b/PICS_Config_Builder/PICS_Config_Builder.vbproj[m
[36m@@ -23,7 +23,9 @@[m
     <DefineTrace>true</DefineTrace>[m
     <OutputPath>bin\Debug\</OutputPath>[m
     <DocumentationFile>PICS_Config_Builder.xml</DocumentationFile>[m
[31m-    <NoWarn>42016,41999,42017,42018,42019,42032,42036,42020,42021,42022</NoWarn>[m
[32m+[m[32m    <NoWarn>41999,42016,42017,42018,42019,42020,42021,42022,42032,42036</NoWarn>[m
[32m+[m[32m    <WarningsAsErrors>[m
[32m+[m[32m    </WarningsAsErrors>[m
   </PropertyGroup>[m
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">[m
     <PlatformTarget>AnyCPU</PlatformTarget>[m
[36m@@ -33,7 +35,9 @@[m
     <Optimize>true</Optimize>[m
     <OutputPath>bin\Release\</OutputPath>[m
     <DocumentationFile>PICS_Config_Builder.xml</DocumentationFile>[m
[31m-    <NoWarn>42016,41999,42017,42018,42019,42032,42036,42020,42021,42022</NoWarn>[m
[32m+[m[32m    <NoWarn>41999,42016,42017,42018,42019,42020,42021,42022,42032,42036</NoWarn>[m
[32m+[m[32m    <WarningsAsErrors>[m
[32m+[m[32m    </WarningsAsErrors>[m
   </PropertyGroup>[m
   <PropertyGroup>[m
     <OptionExplicit>On</OptionExplicit>[m
[36m@@ -48,6 +52,9 @@[m
     <OptionInfer>On</OptionInfer>[m
   </PropertyGroup>[m
   <ItemGroup>[m
[32m+[m[32m    <Reference Include="Microsoft.Office.Tools.Excel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">[m
[32m+[m[32m      <EmbedInteropTypes>True</EmbedInteropTypes>[m
[32m+[m[32m    </Reference>[m
     <Reference Include="System" />[m
     <Reference Include="System.Data" />[m
     <Reference Include="System.Deployment" />[m
[36m@@ -60,6 +67,7 @@[m
     <Reference Include="System.Net.Http" />[m
   </ItemGroup>[m
   <ItemGroup>[m
[32m+[m[32m    <Import Include="Microsoft.Office.Tools.Excel" />[m
     <Import Include="Microsoft.VisualBasic" />[m
     <Import Include="System" />[m
     <Import Include="System.Collections" />[m
[36m@@ -71,6 +79,7 @@[m
     <Import Include="System.Linq" />[m
     <Import Include="System.Xml.Linq" />[m
     <Import Include="System.Threading.Tasks" />[m
[32m+[m[32m    <Import Include="VBScript_RegExp_55" />[m
   </ItemGroup>[m
   <ItemGroup>[m
     <Compile Include="Form1.vb">[m
[36m@@ -102,6 +111,9 @@[m
     <Compile Include="WireData.vb" />[m
   </ItemGroup>[m
   <ItemGroup>[m
[32m+[m[32m    <EmbeddedResource Include="Form1.resx">[m
[32m+[m[32m      <DependentUpon>Form1.vb</DependentUpon>[m
[32m+[m[32m    </EmbeddedResource>[m
     <EmbeddedResource Include="My Project\Resources.resx">[m
       <Generator>VbMyResourcesResXFileCodeGenerator</Generator>[m
       <LastGenOutput>Resources.Designer.vb</LastGenOutput>[m
[36m@@ -121,5 +133,46 @@[m
     </None>[m
     <None Include="App.config" />[m
   </ItemGroup>[m
[32m+[m[32m  <ItemGroup>[m
[32m+[m[32m    <COMReference Include="Microsoft.Office.Core">[m
[32m+[m[32m      <Guid>{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}</Guid>[m
[32m+[m[32m      <VersionMajor>2</VersionMajor>[m
[32m+[m[32m      <VersionMinor>8</VersionMinor>[m
[32m+[m[32m      <Lcid>0</Lcid>[m
[32m+[m[32m      <WrapperTool>primary</WrapperTool>[m
[32m+[m[32m      <Isolated>False</Isolated>[m
[32m+[m[32m      <EmbedInteropTypes>True</EmbedInteropTypes>[m
[32m+[m[32m    </COMReference>[m
[32m+[m[32m    <COMReference Include="Microsoft.Office.Interop.Excel">[m
[32m+[m[32m      <Guid>{00020813-0000-0000-C000-000000000046}</Guid>[m
[32m+[m[32m      <VersionMajor>1</VersionMajor>[m
[32m+[m[32m      <VersionMinor>9</VersionMinor>[m
[32m+[m[32m      <Lcid>0</Lcid>[m
[32m+[m[32m      <WrapperTool>primary</WrapperTool>[m
[32m+[m[32m      <Isolated>False</Isolated>[m
[32m+[m[32m      <EmbedInteropTypes>True</EmbedInteropTypes>[m
[32m+[m[32m    </COMReference>[m
[32m+[m[32m    <COMReference Include="VBIDE">[m
[32m+[m[32m      <Guid>{0002E157-0000-0000-C000-000000000046}</Guid>[m
[32m+[m[32m      <VersionMajor>5</VersionMajor>[m
[32m+[m[32m      <VersionMinor>3</VersionMinor>[m
[32m+[m[32m      <Lcid>0</Lcid>[m
[32m+[m[32m      <WrapperTool>primary</WrapperTool>[m
[32m+[m[32m      <Isolated>False</Isolated>[m
[32m+[m[32m      <EmbedInteropTypes>True</EmbedInteropTypes>[m
[32m+[m[32m    </COMReference>[m
[32m+[m[32m    <COMReference Include="VBScript_RegExp_55">[m
[32m+[m[32m      <Guid>{3F4DACA7-160D-11D2-A8E9-00104B365C9F}</Guid>[m
[32m+[m[32m      <VersionMajor>5</VersionMajor>[m
[32m+[m[32m      <VersionMinor>5</VersionMinor>[m
[32m+[m[32m      <Lcid>0</Lcid>[m
[32m+[m[32m      <WrapperTool>tlbimp</WrapperTool>[m
[32m+[m[32m      <Isolated>False</Isolated>[m
[32m+[m[32m      <EmbedInteropTypes>True</EmbedInteropTypes>[m
[32m+[m[32m    </COMReference>[m
[32m+[m[32m  </ItemGroup>[m
[32m+[m[32m  <ItemGroup>[m
[32m+[m[32m    <WCFMetadata Include="Connected Services\" />[m
[32m+[m[32m  </ItemGroup>[m
   <Import Project="$(MSBuildToolsPath)\Microsoft.VisualBasic.targets" />[m
 </Project>[m
\ No newline at end of file[m
[1mdiff --git a/PICS_Config_Builder/PICS_Config_Builder.vbproj.user b/PICS_Config_Builder/PICS_Config_Builder.vbproj.user[m
[1mnew file mode 100644[m
[1mindex 0000000..8c114ba[m
[1m--- /dev/null[m
[1m+++ b/PICS_Config_Builder/PICS_Config_Builder.vbproj.user[m
[36m@@ -0,0 +1,6 @@[m
[32m+[m[32mï»¿<?xml version="1.0" encoding="utf-8"?>[m
[32m+[m[32m<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">[m
[32m+[m[32m  <PropertyGroup>[m
[32m+[m[32m    <ReferencePath>C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.Office.Tools.Excel\v4.0_10.0.0.0__b03f5f7f11d50a3a\</ReferencePath>[m
[32m+[m[32m  </PropertyGroup>[m
[32m+[m[32m</Project>[m
\ No newline at end of file[m
[1mdiff --git a/PICS_Config_Builder/SimData.vb b/PICS_Config_Builder/SimData.vb[m
[1mindex c40745d..c1e03d1 100644[m
[1m--- a/PICS_Config_Builder/SimData.vb[m
[1m+++ b/PICS_Config_Builder/SimData.vb[m
[36m@@ -1,538 +1,521 @@[m
[31m-Sub Generate_Sim_Data(ByRef x As Integer)[m
[31m-[m
[31m-    Call Unhide_All_Sheets[m
[31m-[m
[31m-    'Unfilter IO Sheet if someone decided to filter it[m
[31m-    Sheets("IO Sheets").Select[m
[31m-    If ActiveSheet.FilterMode Then ActiveSheet.ShowAllData[m
[31m-[m
[31m-    Clear_Sheet_Type("SimData")[m
[31m-    Clear_Sheet_Type("IOTags")[m
[31m-    Clear_Sheet_Type("MinMax")[m
[31m-[m
[31m-    Call Make_Sim_Tags("IO Sheets", "SimData")[m
[31m-[m
[31m-    Call CheckMinMaxData("MinMax - AIn")[m
[31m-[m
[31m-    Call Rem_Spaces("SimData", "E")[m
[31m-    Call Rem_Spaces("IOTags - AIn", "E")[m
[31m-    Call Rem_Spaces("IOTags - DIn", "E")[m
[31m-    Call Rem_Spaces("IOTags - ValveMO", "E")[m
[31m-    Call Rem_Spaces("IOTags - ValveSO", "E")[m
[31m-    Call Rem_Spaces("IOTags - ValveC", "E")[m
[31m-    Call Rem_Spaces("IOTags - Motor", "E")[m
[31m-    Call Rem_Spaces("IOTags - VSD", "E")[m
[31m-[m
[31m-    Call SortByColumn("IOTags - ValveC", "E")[m
[31m-[m
[31m-    Sheets("IOTags - AIn").Select[m
[31m-    Range("A2").Select[m
[31m-    Sheets("IOTags - DIn").Select[m
[31m-    Range("A2").Select[m
[31m-    Sheets("SimData").Select[m
[31m-    Range("A8").Select[m
[31m-[m
[31m-    Sheets("Instructions").Select[m
[31m-[m
[31m-    Call Hide_Sheets[m
[31m-[m
[31m-End Sub[m
[31m-[m
[31m-Sub Button_Hide_Sheets(ByRef x As Integer)[m
[31m-[m
[31m-    Application.ScreenUpdating = False[m
[31m-[m
[31m-    Hide_Sheets[m
[31m-[m
[31m-    Application.ScreenUpdating = True[m
[31m-[m
[31m-End Sub[m
[31m-[m
[31m-Sub Button_Unhide_All_Sheets(ByRef x As Integer)[m
[31m-[m
[31m-    Application.ScreenUpdating = False[m
[31m-[m
[31m-    Unhide_All_Sheets[m
[31m-[m
[31m-    Application.ScreenUpdating = True[m
[31m-[m
[31m-End Sub[m
[31m-[m
[31m-Sub showStatusBar(Message As String)[m
[31m-'[m
[31m-'[m
[31m-'[m
[31m-    Application.StatusBar = Message[m
[31m-    Application.OnTime Now() + TimeSerial(0, 0, 5), "hideStatusBar"[m
[31m-        [m
[31m-End Sub[m
[31m-Sub hideStatusBar()[m
[31m-'[m
[31m-'[m
[31m-'[m
[31m-    Application.StatusBar = False[m
[31m-    [m
[31m-End Sub[m
[31m-[m
[31m-Sub Make_Sim_Tags(sourceSheet As String, DataSheet As String)[m
[31m-'[m
[31m-'[m
[31m-'[m
[31m-    Dim SimName As String[m
[31m-    Dim SimType As String[m
[31m-    Dim SimDefVal As String[m
[31m-    Dim SimIOAddr As String[m
[31m-    Dim SimDesc As String[m
[31m-    [m
[31m-    Dim Prefix As String[m
[31m-    Dim PLCBaseTag As String[m
[31m-    Dim DataType As String[m
[31m-    Dim IOVariable As String[m
[31m-    Dim IOAddress As String[m
[31m-    Dim IOType As String[m
[31m-    Dim DesignTag As String[m
[31m-    Dim Description As String[m
[31m-    Dim Rack As String[m
[31m-    Dim Module As String[m
[31m-    Dim Channel As String[m
[31m-    [m
[31m-    Dim IOPrefix[m
[31m-    Dim AInSheet As String[m
[31m-    Dim ValveCSheet As String[m
[31m-    Dim DInSheet As String[m
[31m-    Dim ValveMOSheet As String[m
[31m-    Dim ValveSOSheet As String[m
[31m-    Dim MotorSheet As String[m
[31m-    Dim VSDSheet As String[m
[31m-    [m
[31m-    Prefix = Get_CPU_Name()[m
[31m-    IOPrefix = "IOTags - "[m
[31m-    MinMaxPrefix = "MinMax - "[m
[31m-[m
[31m-    'Souce data is in SourceSheet, DataSheet is the destination[m
[31m-    Sheets(sourceSheet).Select[m
[31m-    SourceRowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-    [m
[31m-    PLCBaseTag_Col = Find_Header_Column(sourceSheet, "PLCBaseTag")[m
[31m-    DataType_Col = Find_Header_Column(sourceSheet, "Data Type")[m
[31m-    IOVariable_Col = Find_Header_Column(sourceSheet, "Variable")[m
[31m-    IOAddress_Col = Find_Header_Column(sourceSheet, "IOAddress")[m
[31m-    IOType_Col = Find_Header_Column(sourceSheet, "IOType")[m
[31m-    DesignTag_Col = Find_Header_Column(sourceSheet, "DesignTag")[m
[31m-    Description_Col = Find_Header_Column(sourceSheet, "Description")[m
[31m-    InputMin_Col = Find_Header_Column(sourceSheet, "InputMin")[m
[31m-    InputMax_Col = Find_Header_Column(sourceSheet, "InputMax")[m
[31m-    OutputMin_Col = Find_Header_Column(sourceSheet, "OutputMin")[m
[31m-    OutputMax_Col = Find_Header_Column(sourceSheet, "OutputMax")[m
[31m-    [m
[31m-    For i = 2 To SourceRowCount[m
[31m-        [m
[31m-        PLCBaseTag = Worksheets(sourceSheet).Cells(i, PLCBaseTag_Col).Value[m
[31m-        DataType = Worksheets(sourceSheet).Cells(i, DataType_Col).Value[m
[31m-        IOVariable = Worksheets(sourceSheet).Cells(i, IOVariable_Col).Value[m
[31m-        IOAddress = Worksheets(sourceSheet).Cells(i, IOAddress_Col).Value[m
[31m-        IOType = Worksheets(sourceSheet).Cells(i, IOType_Col).Value[m
[31m-        DesignTag = Worksheets(sourceSheet).Cells(i, DesignTag_Col).Value[m
[31m-        Description = Worksheets(sourceSheet).Cells(i, Description_Col).Value[m
[31m-        InputMin = Worksheets(sourceSheet).Cells(i, InputMin_Col).Value[m
[31m-        InputMax = Worksheets(sourceSheet).Cells(i, InputMax_Col).Value[m
[31m-        OutputMin = Worksheets(sourceSheet).Cells(i, OutputMin_Col).Value[m
[31m-        OutputMax = Worksheets(sourceSheet).Cells(i, OutputMax_Col).Value[m
[31m-        [m
[31m-        ' Since these are all the same in PICS functionally, make them all AIn[m
[31m-        DataType = Replace(DataType, "AInAdv", "AIn")[m
[31m-        DataType = Replace(DataType, "AInHART", "AIn")[m
[31m-        [m
[31m-        'Ignores spares, and types that have no use here[m
[31m-        If UCase(DesignTag) <> "SPARE" And _[m
[31m-            UCase(DataType) <> "SPARE" And _[m
[31m-            UCase(PLCBaseTag) <> "SPARE" And _[m
[32m+[m
[32m+[m[32mModule SimData[m
[32m+[m
[32m+[m[32m    Sub Generate_Sim_Data(ByRef wrkBook As Workbook)[m
[32m+[m
[32m+[m[32m        Call Unhide_All_Sheets(wrkBook)[m
[32m+[m
[32m+[m[32m        'Unfilter IO Sheet if someone decided to filter it[m
[32m+[m[32m        Dim wrkSheet As Worksheet = wrkBook.Sheets("IO Sheets").Select[m
[32m+[m[32m        If wrkSheet.FilterMode Then wrkSheet.ShowAllData()[m
[32m+[m
[32m+[m[32m        Clear_Sheet_Type(wrkBook, "SimData")[m
[32m+[m[32m        Clear_Sheet_Type(wrkBook, "IOTags")[m
[32m+[m[32m        Clear_Sheet_Type(wrkBook, "MinMax")[m
[32m+[m
[32m+[m[32m        Call Make_Sim_Tags(wrkBook, "IO Sheets", "SimData")[m
[32m+[m
[32m+[m[32m        Call CheckMinMaxData(wrkBook, "MinMax - AIn")[m
[32m+[m
[32m+[m[32m        Call Rem_Spaces(wrkBook, "SimData", "E")[m
[32m+[m[32m        Call Rem_Spaces(wrkBook, "IOTags - AIn", "E")[m
[32m+[m[32m        Call Rem_Spaces(wrkBook, "IOTags - DIn", "E")[m
[32m+[m[32m        Call Rem_Spaces(wrkBook, "IOTags - ValveMO", "E")[m
[32m+[m[32m        Call Rem_Spaces(wrkBook, "IOTags - ValveSO", "E")[m
[32m+[m[32m        Call Rem_Spaces(wrkBook, "IOTags - ValveC", "E")[m
[32m+[m[32m        Call Rem_Spaces(wrkBook, "IOTags - Motor", "E")[m
[32m+[m[32m        Call Rem_Spaces(wrkBook, "IOTags - VSD", "E")[m
[32m+[m
[32m+[m[32m        Call SortByColumn(wrkBook, "IOTags - ValveC", "E")[m
[32m+[m
[32m+[m[32m        wrkSheet = wrkBook.Sheets("IOTags - AIn")[m
[32m+[m[32m        wrkSheet.Range("A2").Select()[m
[32m+[m
[32m+[m[32m        wrkSheet = wrkBook.Sheets("IOTags - DIn")[m
[32m+[m[32m        wrkSheet.Range("A2").Select()[m
[32m+[m
[32m+[m[32m        wrkSheet = wrkBook.Sheets("SimData")[m
[32m+[m[32m        wrkSheet.Range("A8").Select()[m
[32m+[m
[32m+[m[32m        wrkSheet = wrkBook.Sheets("Instructions")[m
[32m+[m
[32m+[m[32m        Call Hide_Sheets(wrkBook)[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Sub Button_Hide_Sheets(ByRef wrkBook As Workbook)[m
[32m+[m
[32m+[m[32m        wrkBook.Application.ScreenUpdating = False[m
[32m+[m
[32m+[m[32m        Hide_Sheets(wrkBook)[m
[32m+[m
[32m+[m[32m        wrkBook.Application.ScreenUpdating = True[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Sub Button_Unhide_All_Sheets(ByRef wrkBook As Workbook)[m
[32m+[m
[32m+[m[32m        wrkBook.Application.ScreenUpdating = False[m
[32m+[m
[32m+[m[32m        Unhide_All_Sheets(wrkBook)[m
[32m+[m
[32m+[m[32m        wrkBook.Application.ScreenUpdating = True[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Sub ShowStatusBar(ByRef wrkBook As Workbook, Message As String)[m
[32m+[m[32m        '[m
[32m+[m[32m        '[m
[32m+[m[32m        '[m
[32m+[m[32m        wrkBook.Application.StatusBar = Message[m
[32m+[m[32m        wrkBook.Application.OnTime(Now() + TimeSerial(0, 0, 5), "hideStatusBar")[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m[32m    Sub HideStatusBar(ByRef wrkBook As Workbook)[m
[32m+[m[32m        '[m
[32m+[m[32m        '[m
[32m+[m[32m        wrkBook.Application.StatusBar = False[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Sub Make_Sim_Tags(ByRef wrkBook As Workbook, sourceSheet As String, DataSheet As String)[m
[32m+[m[32m        '[m
[32m+[m[32m        Dim SimName, SimType, SimDefVal, SimIOAddr, SimDesc As String[m
[32m+[m
[32m+[m[32m        Dim Prefix, PLCBaseTag, DataType, IOVariable, IOAddress, IOType, DesignTag, Description As String[m
[32m+[m[32m        'Dim Rack, Module, Channel As String[m
[32m+[m
[32m+[m[32m        Dim IOPrefix[m
[32m+[m[32m        'Dim AInSheet, ValveCSheet, DInSheet, ValveMOSheet, ValveSOSheet, MotorSheet, VSDSheet As String[m
[32m+[m[32m        Dim MinMaxPrefix As String[m
[32m+[m[32m        Dim InputMin, InputMax, OutputMin, OutputMax As Integer[m
[32m+[m
[32m+[m[32m        Prefix = Get_CPU_Name(wrkBook)[m
[32m+[m[32m        IOPrefix = "IOTags - "[m
[32m+[m[32m        MinMaxPrefix = "MinMax - "[m
[32m+[m
[32m+[m[32m        'Source data is in sourceSheet, DataSheet is the destination[m
[32m+[m[32m        Dim wrkSheet As Worksheet = wrkBook.Sheets(sourceSheet).Select[m
[32m+[m[32m        Dim SourceRowCount As Integer = wrkSheet.Range("A").End(Microsoft.Office.Interop.Excel.XlDirection.xlUp).Row[m
[32m+[m
[32m+[m[32m        Dim PLCBaseTag_Col As Integer = Find_Header_Column(wrkBook, sourceSheet, "PLCBaseTag")[m
[32m+[m[32m        Dim DataType_Col As Integer = Find_Header_Column(wrkBook, sourceSheet, "Data Type")[m
[32m+[m[32m        Dim IOVariable_Col As Integer = Find_Header_Column(wrkBook, sourceSheet, "Variable")[m
[32m+[m[32m        Dim IOAddress_Col As Integer = Find_Header_Column(wrkBook, sourceSheet, "IOAddress")[m
[32m+[m[32m        Dim IOType_Col As Integer = Find_Header_Column(wrkBook, sourceSheet, "IOType")[m
[32m+[m[32m        Dim DesignTag_Col As Integer = Find_Header_Column(wrkBook, sourceSheet, "DesignTag")[m
[32m+[m[32m        Dim Description_Col As Integer = Find_Header_Column(wrkBook, sourceSheet, "Description")[m
[32m+[m[32m        Dim InputMin_Col As Integer = Find_Header_Column(wrkBook, sourceSheet, "InputMin")[m
[32m+[m[32m        Dim InputMax_Col As Integer = Find_Header_Column(wrkBook, sourceSheet, "InputMax")[m
[32m+[m[32m        Dim OutputMin_Col As Integer = Find_Header_Column(wrkBook, sourceSheet, "OutputMin")[m
[32m+[m[32m        Dim OutputMax_Col As Integer = Find_Header_Column(wrkBook, sourceSheet, "OutputMax")[m
[32m+[m
[32m+[m[32m        For i = 2 To SourceRowCount[m
[32m+[m
[32m+[m[32m            PLCBaseTag = wrkSheet.Range(i, PLCBaseTag_Col).Value[m
[32m+[m[32m            DataType = wrkSheet.Range(i, DataType_Col).Value[m
[32m+[m[32m            IOVariable = wrkSheet.Range(i, IOVariable_Col).Value[m
[32m+[m[32m            IOAddress = wrkSheet.Range(i, IOAddress_Col).Value[m
[32m+[m[32m            IOType = wrkSheet.Range(i, IOType_Col).Value[m
[32m+[m[32m            DesignTag = wrkSheet.Range(i, DesignTag_Col).Value[m
[32m+[m[32m            Description = wrkSheet.Range(i, Description_Col).Value[m
[32m+[m[32m            InputMin = wrkSheet.Range(i, InputMin_Col).Value[m
[32m+[m[32m            InputMax = wrkSheet.Range(i, InputMax_Col).Value[m
[32m+[m[32m            OutputMin = wrkSheet.Range(i, OutputMin_Col).Value[m
[32m+[m[32m            OutputMax = wrkSheet.Range(i, OutputMax_Col).Value[m
[32m+[m
[32m+[m[32m            ' Since these are all the same in PICS functionally, make them all AIn[m
[32m+[m[32m            DataType = Replace(DataType, "AInAdv", "AIn")[m
[32m+[m[32m            DataType = Replace(DataType, "AInHART", "AIn")[m
[32m+[m
[32m+[m[32m            'Ignores spares, and types that have no use here[m
[32m+[m[32m            If UCase(DesignTag) <> "SPARE" And[m
[32m+[m[32m            UCase(DataType) <> "SPARE" And[m
[32m+[m[32m            UCase(PLCBaseTag) <> "SPARE" And[m
             UCase(PLCBaseTag) <> "" Then[m
[31m-            [m
[31m-            ' Strip of the P_ or PC_ to get the 'base' type[m
[31m-            ' There should be a corresponding sheet[m
[31m-            '   - If not error and say so.[m
[31m-            Dim stripType As String[m
[31m-            Dim stripSheet As String[m
[31m-            Dim stripMinMax As String[m
[31m-            stripType = Mid(DataType, InStr(DataType, "_") + 1, Len(DataType))[m
[31m-            stripSheet = IOPrefix & stripType[m
[31m-            stripMinMax = MinMaxPrefix & stripType[m
[31m-            [m
[31m-            DesignTag = Replace(DesignTag, "-", "_")    'Change dashes to underscores[m
[31m-            IOVariable = Replace(IOVariable, ".", "_")  'Change dot to underscore[m
[31m-            [m
[31m-            If InStr(IOType, "DI") > 0 Then[m
[31m-                'Paste First Row[m
[31m-                SimName = IOVariable[m
[31m-                SimType = "B R/W"[m
[31m-                SimDefVal = "0"[m
[31m-                SimIOAddr = "[" & Prefix & "_Sim]" & IOAddress[m
[31m-                SimDesc = Description[m
[31m-[m
[31m-                Sheets(DataSheet).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = SimType[m
[31m-                Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[31m-                Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[31m-                Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[31m-                [m
[31m-                ' Write data to IO tag sheet[m
[31m-                Sheets(stripSheet).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = SimType[m
[31m-                Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[31m-                Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[31m-                Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[31m-                                                                                   [m
[31m-                'Paste Second (Fault) Row[m
[31m-                SimName = SimName & "_Flt"[m
[31m-                SimIOAddr = Replace(SimIOAddr, "Data", "Fault")[m
[31m-                SimDesc = Description & " CH_FLT"[m
[31m-[m
[31m-                Sheets(DataSheet).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = SimType[m
[31m-                Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[31m-                Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[31m-                Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[31m-                [m
[31m-                ' Write channel fault item to IO tag sheet[m
[31m-                Sheets(stripSheet).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = SimType[m
[31m-                Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[31m-                Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[31m-                Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[31m-                [m
[31m-            ElseIf InStr(IOType, "DO") > 0 Then[m
[31m-                'Paste Row[m
[31m-                SimName = IOVariable[m
[31m-                SimType = "B R"[m
[31m-                SimDefVal = ""[m
[31m-                SimIOAddr = "[" & Prefix & "_Sim]" & IOAddress[m
[31m-                SimDesc = Description[m
[31m-[m
[31m-                Sheets(DataSheet).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = SimType[m
[31m-                Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[31m-                Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[31m-                Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[31m-[m
[31m-                Sheets(stripSheet).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = SimType[m
[31m-                Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[31m-                Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[31m-                Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[31m-            [m
[31m-            ElseIf InStr(IOType, "AI") > 0 Then[m
[31m-                'Paste First Row[m
[31m-                SimName = IOVariable[m
[31m-                SimType = "F R/W"[m
[31m-                SimDefVal = "0"[m
[31m-                SimIOAddr = "[" & Prefix & "_Sim]" & IOAddress[m
[31m-                SimDesc = Description[m
[31m-[m
[31m-                Sheets(DataSheet).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = SimType[m
[31m-                Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[31m-                Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[31m-                Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[31m-                [m
[31m-                ' Write data to IO tag sheets[m
[31m-                Sheets(stripSheet).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = SimType[m
[31m-                Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[31m-                Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[31m-                Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[31m-                [m
[31m-                Sheets(stripMinMax).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = InputMin[m
[31m-                Range("C" & RowCount + 1).Cells.Value = InputMax[m
[31m-                Range("D" & RowCount + 1).Cells.Value = OutputMin[m
[31m-                Range("E" & RowCount + 1).Cells.Value = OutputMax[m
[31m-                [m
[31m-                'Paste Second (Fault) Row[m
[31m-                SimName = SimName & "_Flt"[m
[31m-                SimType = "B R/W"[m
[31m-                [m
[31m-                ' Handle HART scenario[m
[31m-                If InStr(IOType, "H") > 0 Then[m
[31m-                    SimIOAddr = Replace(SimIOAddr, ".Data", "Fault")[m
[31m-                Else[m
[32m+[m
[32m+[m[32m                ' Strip of the P_ or PC_ to get the 'base' type[m
[32m+[m[32m                ' There should be a corresponding sheet[m
[32m+[m[32m                '   - If not error and say so.[m
[32m+[m[32m                Dim stripType As String[m
[32m+[m[32m                Dim stripSheet As String[m
[32m+[m[32m                Dim stripMinMax As String[m
[32m+[m[32m                stripType = Mid(DataType, InStr(DataType, "_") + 1, Len(DataType))[m
[32m+[m[32m                stripSheet = IOPrefix & stripType[m
[32m+[m[32m                stripMinMax = MinMaxPrefix & stripType[m
[32m+[m
[32m+[m[32m                DesignTag = Replace(DesignTag, "-", "_")    'Change dashes to underscores[m
[32m+[m[32m                IOVariable = Replace(IOVariable, ".", "_")  'Change dot to underscore[m
[32m+[m
[32m+[m[32m                If InStr(IOType, "DI") > 0 Then[m
[32m+[m[32m                    'Paste First Row[m
[32m+[m[32m                    SimName = IOVariable[m
[32m+[m[32m                    SimType = "B R/W"[m
[32m+[m[32m                    SimDefVal = "0"[m
[32m+[m[32m                    SimIOAddr = "[" & Prefix & "_Sim]" & IOAddress[m
[32m+[m[32m                    SimDesc = Description[m
[32m+[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(DataSheet).Select[m
[32m+[m
[32m+[m[32m                    Dim RowCount As Integer = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = SimType[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[32m+[m
[32m+[m[32m                    ' Write data to IO tag sheet[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(stripSheet).Select[m
[32m+[m[32m                    RowCount = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = SimType[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[32m+[m
[32m+[m[32m                    'Paste Second (Fault) Row[m
[32m+[m[32m                    SimName = SimName & "_Flt"[m
[32m+[m[32m                    SimIOAddr = Replace(SimIOAddr, "Data", "Fault")[m
[32m+[m[32m                    SimDesc = Description & " CH_FLT"[m
[32m+[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(DataSheet).Select[m
[32m+[m[32m                    RowCount = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = SimType[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[32m+[m
[32m+[m[32m                    ' Write channel fault item to IO tag sheet[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(stripSheet).Select[m
[32m+[m[32m                    RowCount = wrkSheet.Cells(wrkSheet.Rows.Count, "A").EndxlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = SimType[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[32m+[m
[32m+[m[32m                ElseIf InStr(IOType, "DO") > 0 Then[m
[32m+[m[32m                    'Paste Row[m
[32m+[m[32m                    SimName = IOVariable[m
[32m+[m[32m                    SimType = "B R"[m
[32m+[m[32m                    SimDefVal = ""[m
[32m+[m[32m                    SimIOAddr = "[" & Prefix & "_Sim]" & IOAddress[m
[32m+[m[32m                    SimDesc = Description[m
[32m+[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(DataSheet).Select[m
[32m+[m[32m                    Dim RowCount As Integer = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = SimType[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[32m+[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(stripSheet).Select[m
[32m+[m[32m                    RowCount = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = SimType[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[32m+[m
[32m+[m[32m                ElseIf InStr(IOType, "AI") > 0 Then[m
[32m+[m[32m                    'Paste First Row[m
[32m+[m[32m                    SimName = IOVariable[m
[32m+[m[32m                    SimType = "F R/W"[m
[32m+[m[32m                    SimDefVal = "0"[m
[32m+[m[32m                    SimIOAddr = "[" & Prefix & "_Sim]" & IOAddress[m
[32m+[m[32m                    SimDesc = Description[m
[32m+[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(DataSheet).Select[m
[32m+[m[32m                    Dim RowCount As Integer = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = SimType[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[32m+[m
[32m+[m[32m                    ' Write data to IO tag sheets[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(stripSheet).Select[m
[32m+[m[32m                    RowCount = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = SimType[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[32m+[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(stripMinMax).Select[m
[32m+[m[32m                    RowCount = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = InputMin[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = InputMax[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = OutputMin[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = OutputMax[m
[32m+[m
[32m+[m[32m                    'Paste Second (Fault) Row[m
[32m+[m[32m                    SimName = SimName & "_Flt"[m
[32m+[m[32m                    SimType = "B R/W"[m
[32m+[m
[32m+[m[32m                    ' Handle HART scenario[m
[32m+[m[32m                    If InStr(IOType, "H") > 0 Then[m
[32m+[m[32m                        SimIOAddr = Replace(SimIOAddr, ".Data", "Fault")[m
[32m+[m[32m                    Else[m
[32m+[m[32m                        SimIOAddr = Replace(SimIOAddr, "Data", "Fault")[m
[32m+[m[32m                    End If[m
[32m+[m
[32m+[m[32m                    SimDesc = Description & " CH_FLT"[m
[32m+[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(DataSheet).Select[m
[32m+[m[32m                    RowCount = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = SimType[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[32m+[m
[32m+[m[32m                    ' Add faults to IO tag sheet[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(stripSheet).Select[m
[32m+[m[32m                    RowCount = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = SimType[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[32m+[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(stripMinMax).Select[m
[32m+[m[32m                    RowCount = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = InputMin[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = InputMax[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = OutputMin[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = OutputMax[m
[32m+[m
[32m+[m[32m                ElseIf InStr(IOType, "AO") > 0 Then[m
[32m+[m[32m                    'Paste Row[m
[32m+[m[32m                    SimName = IOVariable[m
[32m+[m[32m                    SimType = "F R"[m
[32m+[m[32m                    SimDefVal = ""[m
[32m+[m[32m                    SimIOAddr = "[" & Prefix & "_Sim]" & IOAddress[m
[32m+[m[32m                    SimDesc = Description[m
[32m+[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(DataSheet).Select[m
[32m+[m[32m                    Dim RowCount As Integer = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = SimType[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[32m+[m
[32m+[m[32m                    ' Write data to IO tag sheet[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(stripSheet).Select[m
[32m+[m[32m                    RowCount = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = SimType[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[32m+[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(stripMinMax).Select[m
[32m+[m[32m                    RowCount = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = InputMin[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = InputMax[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = OutputMin[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = OutputMax[m
[32m+[m
[32m+[m[32m                ElseIf InStr(IOType, "RTD") > 0 Then[m
[32m+[m[32m                    'Paste First Row[m
[32m+[m[32m                    SimName = IOVariable[m
[32m+[m[32m                    SimType = "F R/W"[m
[32m+[m[32m                    SimDefVal = "0"[m
[32m+[m[32m                    SimIOAddr = "[" & Prefix & "_Sim]" & IOAddress[m
[32m+[m[32m                    SimDesc = Description[m
[32m+[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(DataSheet).Select[m
[32m+[m[32m                    Dim RowCount As Integer = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = SimType[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[32m+[m
[32m+[m[32m                    'Write data to IO tag sheet[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(stripSheet).Select[m
[32m+[m[32m                    RowCount = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = SimType[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[32m+[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(stripMinMax).Select[m
[32m+[m[32m                    RowCount = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = InputMin[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = InputMax[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = OutputMin[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = OutputMax[m
[32m+[m
[32m+[m[32m                    'Paste Second (Fault) Row[m
[32m+[m[32m                    SimName = SimName & "_Flt"[m
[32m+[m[32m                    SimType = "B R/W"[m
                     SimIOAddr = Replace(SimIOAddr, "Data", "Fault")[m
[32m+[m[32m                    SimDesc = Description & " CH_FLT"[m
[32m+[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(DataSheet).Select[m
[32m+[m[32m                    RowCount = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = SimType[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[32m+[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(stripSheet).Select[m
[32m+[m[32m                    RowCount = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = SimType[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[32m+[m
[32m+[m[32m                    wrkSheet = wrkBook.Sheets(stripMinMax).Select[m
[32m+[m[32m                    RowCount = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Select()[m
[32m+[m[32m                    wrkSheet.Range("A" & RowCount + 1).Cells.Value = SimName[m
[32m+[m[32m                    wrkSheet.Range("B" & RowCount + 1).Cells.Value = InputMin[m
[32m+[m[32m                    wrkSheet.Range("C" & RowCount + 1).Cells.Value = InputMax[m
[32m+[m[32m                    wrkSheet.Range("D" & RowCount + 1).Cells.Value = OutputMin[m
[32m+[m[32m                    wrkSheet.Range("E" & RowCount + 1).Cells.Value = OutputMax[m
[32m+[m
                 End If[m
[31m-                [m
[31m-                SimDesc = Description & " CH_FLT"[m
[31m-[m
[31m-                Sheets(DataSheet).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = SimType[m
[31m-                Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[31m-                Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[31m-                Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[31m-                [m
[31m-                ' Add faults to IO tag sheet[m
[31m-                Sheets(stripSheet).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = SimType[m
[31m-                Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[31m-                Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[31m-                Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[31m-                [m
[31m-                Sheets(stripMinMax).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = InputMin[m
[31m-                Range("C" & RowCount + 1).Cells.Value = InputMax[m
[31m-                Range("D" & RowCount + 1).Cells.Value = OutputMin[m
[31m-                Range("E" & RowCount + 1).Cells.Value = OutputMax[m
[31m-            [m
[31m-            ElseIf InStr(IOType, "AO") > 0 Then[m
[31m-                'Paste Row[m
[31m-                SimName = IOVariable[m
[31m-                SimType = "F R"[m
[31m-                SimDefVal = ""[m
[31m-                SimIOAddr = "[" & Prefix & "_Sim]" & IOAddress[m
[31m-                SimDesc = Description[m
[31m-[m
[31m-                Sheets(DataSheet).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = SimType[m
[31m-                Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[31m-                Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[31m-                Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[31m-                [m
[31m-                ' Write data to IO tag sheet[m
[31m-                Sheets(stripSheet).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = SimType[m
[31m-                Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[31m-                Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[31m-                Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[31m-            [m
[31m-                Sheets(stripMinMax).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = InputMin[m
[31m-                Range("C" & RowCount + 1).Cells.Value = InputMax[m
[31m-                Range("D" & RowCount + 1).Cells.Value = OutputMin[m
[31m-                Range("E" & RowCount + 1).Cells.Value = OutputMax[m
[31m-                                        [m
[31m-            ElseIf InStr(IOType, "RTD") > 0 Then[m
[31m-                'Paste First Row[m
[31m-                SimName = IOVariable[m
[31m-                SimType = "F R/W"[m
[31m-                SimDefVal = "0"[m
[31m-                SimIOAddr = "[" & Prefix & "_Sim]" & IOAddress[m
[31m-                SimDesc = Description[m
[31m-[m
[31m-                Sheets(DataSheet).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = SimType[m
[31m-                Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[31m-                Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[31m-                Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[31m-                [m
[31m-                'Write data to IO tag sheet[m
[31m-                Sheets(stripSheet).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = SimType[m
[31m-                Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[31m-                Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[31m-                Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[31m-                [m
[31m-                Sheets(stripMinMax).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = InputMin[m
[31m-                Range("C" & RowCount + 1).Cells.Value = InputMax[m
[31m-                Range("D" & RowCount + 1).Cells.Value = OutputMin[m
[31m-                Range("E" & RowCount + 1).Cells.Value = OutputMax[m
[31m-                [m
[31m-                'Paste Second (Fault) Row[m
[31m-                SimName = SimName & "_Flt"[m
[31m-                SimType = "B R/W"[m
[31m-                SimIOAddr = Replace(SimIOAddr, "Data", "Fault")[m
[31m-                SimDesc = Description & " CH_FLT"[m
[31m-[m
[31m-                Sheets(DataSheet).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = SimType[m
[31m-                Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[31m-                Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[31m-                Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[31m-                [m
[31m-                Sheets(stripSheet).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = SimType[m
[31m-                Range("C" & RowCount + 1).Cells.Value = SimDefVal[m
[31m-                Range("D" & RowCount + 1).Cells.Value = SimIOAddr[m
[31m-                Range("E" & RowCount + 1).Cells.Value = SimDesc[m
[31m-                [m
[31m-                Sheets(stripMinMax).Select[m
[31m-                RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-                Range("A" & RowCount + 1).Select[m
[31m-                Range("A" & RowCount + 1).Cells.Value = SimName[m
[31m-                Range("B" & RowCount + 1).Cells.Value = InputMin[m
[31m-                Range("C" & RowCount + 1).Cells.Value = InputMax[m
[31m-                Range("D" & RowCount + 1).Cells.Value = OutputMin[m
[31m-                Range("E" & RowCount + 1).Cells.Value = OutputMax[m
[31m-                [m
             End If[m
[32m+[m[32m        Next i[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m[32m    Sub CheckMinMaxData(ByRef wrkBook As Workbook, minMaxSheet As String)[m
[32m+[m[32m        '[m
[32m+[m[32m        '   Checks to make sure the Min Max data is numeric.[m
[32m+[m[32m        Dim wrkSheet As Worksheet = wrkBook.Sheets("minMaxSheet").Select[m
[32m+[m[32m        Dim RowCount As Integer = wrkSheet.Cells(wrkSheet.Rows.Count, "A").End.xlUp.Row[m
[32m+[m
[32m+[m[32m        For i = 2 To RowCount[m
[32m+[m[32m            If Not IsNumeric(wrkBook.Sheets("minMaxSheet").Range("B" & i).Cells.Value) Then[m
[32m+[m[32m                wrkSheet = wrkBook.Sheets("IO Sheets").Select[m
[32m+[m[32m                wrkSheet.Columns("L").Select[m
[32m+[m[32m                MsgBox("InputMin must be numeric values.")[m
[32m+[m[32m                Exit For[m
[32m+[m[32m            End If[m
[32m+[m[32m        Next i[m
[32m+[m
[32m+[m[32m        For i = 2 To RowCount[m
[32m+[m[32m            If Not IsNumeric(wrkBook.Sheets(minMaxSheet).Range("C" & i).Cells.Value) Then[m
[32m+[m[32m                wrkSheet = wrkBook.Sheets("IO Sheets").Select[m
[32m+[m[32m                wrkSheet.Columns("M").Select[m
[32m+[m[32m                MsgBox("InputMax must be numeric values.")[m
[32m+[m[32m                Exit For[m
[32m+[m[32m            End If[m
[32m+[m[32m        Next i[m
[32m+[m
[32m+[m[32m        For i = 2 To RowCount[m
[32m+[m[32m            If Not IsNumeric(wrkBook.Sheets(minMaxSheet).Range("D" & i).Cells.Value) Then[m
[32m+[m[32m                wrkSheet = wrkBook.Sheets("IO Sheets").Select[m
[32m+[m[32m                wrkSheet.Columns("N").Select[m
[32m+[m[32m                MsgBox("OutputMin must be numeric values.")[m
[32m+[m[32m                Exit For[m
[32m+[m[32m            End If[m
[32m+[m[32m        Next i[m
[32m+[m
[32m+[m[32m        For i = 2 To RowCount[m
[32m+[m[32m            If Not IsNumeric(wrkBook.Sheets(minMaxSheet).Range("E" & i).Cells.Value) Then[m
[32m+[m[32m                wrkSheet = wrkBook.Sheets("IO Sheets").Select[m
[32m+[m[32m                wrkSheet.Columns("O").Select[m
[32m+[m[32m                MsgBox("OutputMax must be numeric values.")[m
[32m+[m[32m                Exit For[m
[32m+[m[32m            End If[m
[32m+[m[32m        Next i[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Function Is_Cell_Blank(ByRef wrkBook As Workbook, DataSheet As String) As Boolean[m
[32m+[m
[32m+[m[32m        Dim wrkSheet As Worksheet = wrkBook.Sheets(DataSheet).Select[m
[32m+[m[32m        If IsNothing(wrkSheet.Range("A8")) Then[m
[32m+[m[32m            'MsgBox "Empty"[m
[32m+[m[32m            Is_Cell_Blank = True[m
[32m+[m[32m        ElseIf wrkSheet.Range("A8").Value = "" Then[m
[32m+[m[32m            'MsgBox "Empty Text"[m
[32m+[m[32m            If wrkSheet.Range("A8").HasFormula Then[m
[32m+[m[32m                'MsgBox "Empty Text is the result of a formula"[m
[32m+[m[32m            End If[m
[32m+[m[32m            Is_Cell_Blank = False[m
[32m+[m[32m        Else[m
[32m+[m[32m            'MsgBox "Contains data"[m
[32m+[m[32m            Is_Cell_Blank = False[m
         End If[m
[31m-    Next i[m
[31m-    [m
[31m-End Sub[m
[31m-Sub CheckMinMaxData(minMaxSheet As String)[m
[31m-'[m
[31m-'   Checks to make sure the Min Max data is numeric.[m
[31m-'[m
[31m-    [m
[31m-    Sheets(minMaxSheet).Select[m
[31m-    RowCount = Cells(Cells.Rows.Count, "A").End(xlUp).Row[m
[31m-    [m
[31m-    For i = 2 To RowCount[m
[31m-        If Not IsNumeric(Worksheets(minMaxSheet).Range("B" & i).Cells.Value) Then[m
[31m-            Sheets("IO Sheets").Select[m
[31m-            Columns("L").Select[m
[31m-            MsgBox "InputMin must be numeric values."[m
[31m-            Exit For[m
[31m-        End If[m
[31m-    Next i[m
[31m-        [m
[31m-    For i = 2 To RowCount[m
[31m-        If Not IsNumeric(Worksheets(minMaxSheet).Range("C" & i).Cells.Value) Then[m
[31m-            Sheets("IO Sheets").Select[m
[31m-            Columns("M").Select[m
[31m-            MsgBox "InputMax must be numeric values."[m
[31m-            Exit For[m
[31m-        End If[m
[31m-    Next i[m
[31m-    [m
[31m-    For i = 2 To RowCount[m
[31m-        If Not IsNumeric(Worksheets(minMaxSheet).Range("D" & i).Cells.Value) Then[m
[31m-            Sheets("IO Sheets").Select[m
[31m-            Columns("N").Select[m
[31m-            MsgBox "OutputMin must be numeric values."[m
[31m-            Exit For[m
[31m-        End If[m
[31m-    Next i[m
[31m-    [m
[31m-    For i = 2 To RowCount[m
[31m-        If Not IsNumeric(Worksheets(minMaxSheet).Range("E" & i).Cells.Value) Then[m
[31m-            Sheets("IO Sheets").Select[m
[31m-            Columns("O").Select[m
[31m-            MsgBox "OutputMax must be numeric values."[m
[31m-            Exit For[m
[31m-        End If[m
[31m-    Next i[m
[31m-        [m
[31m-End Sub[m
[31m-[m
[31m-Function Is_Cell_Blank(DataSheet As String) As Boolean[m
[31m-'[m
[31m-'[m
[31m-'[m
[31m-    Sheets(DataSheet).Select[m
[31m-    If IsEmpty(Range("A8")) Then[m
[31m-        'MsgBox "Empty"[m
[31m-        IsCellBlank = True[m
[31m-    ElseIf Range("A8") = "" Then[m
[31m-        'MsgBox "Empty Text"[m
[31m-        If Range("A8").HasFormula Then[m
[31m-            'MsgBox "Empty Text is the result of a formula"[m
[32m+[m
[32m+[m[32m    End Function[m
[32m+[m[32m    Sub Rem_Spaces(ByRef wrkBook As Workbook, destSheet As String, DestCol As String)[m
[32m+[m[32m        '[m
[32m+[m[32m        Dim wrkSheet As Worksheet = wrkBook.Sheets(destSheet).Select[m
[32m+[m
[32m+[m[32m        wrkSheet.Columns(DestCol).Replace(What:="  ",[m
[32m+[m[32m                        Replacement:=" ",[m
[32m+[m[32m                        LookAt:="xlPart",[m
[32m+[m[32m                        SearchOrder:="xlByRows",[m
[32m+[m[32m                        MatchCase:=False,[m
[32m+[m[32m                        SearchFormat:=False,[m
[32m+[m[32m                        ReplaceFormat:=False)[m
[32m+[m[32m        wrkSheet.Range("A1").Select()[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Sub Remove_From_Desc(ByRef wrkSheet As Worksheet, ByRef x As Integer)[m
[32m+[m
[32m+[m[32m        Dim DelWord, OldDesc, NewDesc As String[m
[32m+[m[32m        Dim RowCount As Integer = wrkSheet.Cells(wrkSheet.Rows.Count, "D").End.xlUp.Row[m
[32m+[m[32m        DelWord = InputBox("Please enter the word you wish to delete:", "Delete From Descriptions")[m
[32m+[m
[32m+[m[32m        'Range("H1").FormulaR1C1 = DelWord[m
[32m+[m[32m        If DelWord <> "" Then[m
[32m+[m[32m            For i = 8 To RowCount[m
[32m+[m[32m                wrkSheet.Range("D" & i).Select()[m
[32m+[m[32m                OldDesc = wrkSheet.Range("D" & i).Value[m
[32m+[m[32m                NewDesc = Replace(OldDesc, DelWord, "")[m
[32m+[m[32m                wrkSheet.Range("D" & i).Value = NewDesc[m
[32m+[m[32m            Next[m
         End If[m
[31m-        IsCellBlank = False[m
[31m-    Else[m
[31m-        'MsgBox "Contains data"[m
[31m-        IsCellBlank = False[m
[31m-    End If[m
[31m-End Function[m
[31m-Sub Rem_Spaces(destSheet As String, DestCol As String)[m
[31m-'[m
[31m-'[m
[31m-'[m
[31m-    Sheets(destSheet).Select[m
[31m-    Columns(DestCol).Replace What:="  ", _[m
[31m-                        Replacement:=" ", _[m
[31m-                        LookAt:=xlPart, _[m
[31m-                        SearchOrder:=xlByRows, _[m
[31m-                        MatchCase:=False, _[m
[31m-                        SearchFormat:=False, _[m
[31m-                        ReplaceFormat:=False[m
[31m-    Range("A1").Select[m
[31m-End Sub[m
[31m-[m
[31m-Sub Remove_From_Desc(ByRef x As Integer)[m
[31m-    Dim DelWord As String[m
[31m-    Dim OldDesc As String[m
[31m-    Dim NewDesc As String[m
[31m-[m
[31m-    RowCount = Cells(Cells.Rows.Count, "D").End(xlUp).Row[m
[31m-    DelWord = InputBox("Please enter the word you wish to delete:", "Delete From Descriptions")[m
[31m-[m
[31m-    'Range("H1").FormulaR1C1 = DelWord[m
[31m-    If DelWord <> "" Then[m
[31m-        For i = 8 To RowCount[m
[31m-            Range("D" & i).Select[m
[31m-            OldDesc = Range("D" & i).Value[m
[31m-            NewDesc = Replace(OldDesc, DelWord, "")[m
[31m-            Range("D" & i).Value = NewDesc[m
[31m-        Next[m
[31m-    End If[m
[31m-[m
[31m-    Range("D8").Select[m
[31m-[m
[31m-End Sub[m
[31m-Sub SortByColumn(sheetName As String, SortCol As String)[m
[31m-'[m
[31m-'[m
[31m-'[m
[31m-    Sheets(sheetName).Select[m
[31m-    RowCount = Cells(Cells.Rows.Count, "D").End(xlUp).Row[m
[31m-    Range("A2:E" & RowCount).Sort Key1:=Range(SortCol & 2), Order1:=xlAscending[m
[31m-    [m
[31m-End Sub[m
[32m+[m
[32m+[m[32m        wrkSheet.Range("D8").Select()[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m[32m    Sub SortByColumn(ByRef wrkBook As Workbook, sheetName As String, SortCol As String)[m
[32m+[m[32m        '[m
[32m+[m[32m        '[m
[32m+[m[32m        Dim wrkSheet As Worksheet = wrkBook.Sheets(sheetName).Select[m
[32m+[m[32m        Dim RowCount As Integer = wrkSheet.Cells(wrkSheet.Rows.Count, "D").End.xlUp.Row[m
[32m+[m
[32m+[m[32m        wrkSheet.Range("A2:E" & RowCount).Sort(Key1:=wrkSheet.Range(SortCol & 2), Order1:="xlAscending")[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32mEnd Module[m
[1mdiff --git a/PICS_Config_Builder/Utilities.vb b/PICS_Config_Builder/Utilities.vb[m
[1mindex 48c283e..d0d7561 100644[m
[1m--- a/PICS_Config_Builder/Utilities.vb[m
[1m+++ b/PICS_Config_Builder/Utilities.vb[m
[36m@@ -1,211 +1,208 @@[m
 [m
[31m-Public Function Clear_Sheet(sheet As String)[m
[31m-[m
[31m-    Dim wrkSheet As Worksheet[m
[31m-    Set wrkSheet = ThisWorkbook.Sheets(sheet)[m
[31m-    [m
[31m-    If InStr(sheet, "IOTags") > 0 Then[m
[31m-        wrkSheet.Range("A2:E9999").Clear[m
[31m-    ElseIf InStr(sheet, "IOMem") > 0 Then[m
[31m-        wrkSheet.Range("A2:F9999").Clear[m
[31m-    ElseIf InStr(sheet, "SimData") > 0 Then[m
[31m-        wrkSheet.Range("A2:E9999").Clear[m
[31m-    ElseIf InStr(sheet, "MinMax") > 0 Then[m
[31m-        wrkSheet.Range("A2:E9999").Clear[m
[31m-    ElseIf InStr(sheet, "MemoryData") > 0 Then[m
[31m-        wrkSheet.Range("A2:F9999").Clear[m
[31m-    ElseIf InStr(sheet, "ControlNetData") > 0 Then[m
[31m-        wrkSheet.Range("A2:F9999").Clear[m
[31m-    ElseIf sheet = "IO Sheets" Then[m
[31m-        ' Clear extra headers[m
[31m-        wrkSheet.Range("B1:AG9999").Clear[m
[31m-        ' Clear data[m
[31m-        wrkSheet.Range("A2:AG9999").Clear[m
[31m-    End If[m
[31m-[m
[31m-End Function[m
[31m-[m
[31m-Public Function Clear_Sheet_Type(typeStr As String)[m
[31m-[m
[31m-    Dim sheetCount As Integer[m
[31m-    sheetCount = ThisWorkbook.Sheets.Count[m
[31m-    [m
[31m-    For i = 1 To sheetCount[m
[31m-        Dim wrkSheet As Worksheet[m
[31m-        Set wrkSheet = ThisWorkbook.Sheets(i)[m
[31m-        [m
[31m-        Dim shtName As String[m
[31m-        shtName = wrkSheet.Name[m
[31m-        [m
[31m-        If InStr(shtName, typeStr) > 0 Then[m
[31m-            Clear_Sheet shtName[m
[32m+[m[32mImports Office = Microsoft.Office.Interop[m
[32m+[m[32mImports Excel = Microsoft.Office.Interop.Excel[m
[32m+[m
[32m+[m[32mModule Utilities[m
[32m+[m
[32m+[m[32m    Const xlCSV As Integer = Excel.XlFileFormat.xlCSV[m
[32m+[m
[32m+[m[32m    Public Sub Clear_Sheet(ByRef wrkSheet As Worksheet)[m
[32m+[m
[32m+[m[32m        If InStr(wrkSheet.Name, "IOTags") > 0 Then[m
[32m+[m[32m            wrkSheet.Range("A2:E9999").Clear()[m
[32m+[m[32m        ElseIf InStr(wrkSheet.Name, "IOMem") > 0 Then[m
[32m+[m[32m            wrkSheet.Range("A2:F9999").Clear()[m
[32m+[m[32m        ElseIf InStr(wrkSheet.Name, "SimData") > 0 Then[m
[32m+[m[32m            wrkSheet.Range("A2:E9999").Clear()[m
[32m+[m[32m        ElseIf InStr(wrkSheet.Name, "MinMax") > 0 Then[m
[32m+[m[32m            wrkSheet.Range("A2:E9999").Clear()[m
[32m+[m[32m        ElseIf InStr(wrkSheet.Name, "MemoryData") > 0 Then[m
[32m+[m[32m            wrkSheet.Range("A2:F9999").Clear()[m
[32m+[m[32m        ElseIf InStr(wrkSheet.Name, "ControlNetData") > 0 Then[m
[32m+[m[32m            wrkSheet.Range("A2:F9999").Clear()[m
[32m+[m[32m        ElseIf wrkSheet.Name = "IO Sheets" Then[m
[32m+[m[32m            ' Clear extra headers[m
[32m+[m[32m            wrkSheet.Range("B1:AG9999").Clear()[m
[32m+[m[32m            ' Clear data[m
[32m+[m[32m            wrkSheet.Range("A2:AG9999").Clear()[m
         End If[m
[31m-        [m
[31m-    Next[m
 [m
[31m-End Function[m
[32m+[m[32m    End Sub[m
 [m
[31m-Public Function Clear_All_Sheets(ByRef x As Integer)[m
[32m+[m[32m    Public Sub Clear_Sheet_Type(ByRef wrkBook As Workbook, typeStr As String)[m
 [m
[31m-    Clear_Sheet_Type("")[m
[32m+[m[32m        Dim wrkSheet As Worksheet[m
[32m+[m[32m        Dim sheetCount As Integer = wrkBook.Sheets.Count[m
 [m
[31m-End Function[m
[32m+[m[32m        For i = 1 To sheetCount[m
[32m+[m[32m            wrkSheet = wrkBook.Sheets(i).Select[m
 [m
[32m+[m[32m            If InStr(wrkSheet.Name, typeStr) > 0 Then[m
[32m+[m[32m                Call Clear_Sheet(wrkSheet)[m
[32m+[m[32m            End If[m
 [m
[31m-Public Function Reset_Sheet(sheet As String)[m
[32m+[m[32m        Next[m
 [m
[31m-    Dim lastSht As Worksheet[m
[31m-    Set lastSht = Application.ActiveSheet[m
[31m-    [m
[31m-    ' Reset selection to A1[m
[31m-    ThisWorkbook.Sheets(sheet).Select[m
[31m-    Range("A1").Select[m
[31m-    [m
[31m-    ' Return to previous sheet[m
[31m-    lastSht.Select[m
[32m+[m[32m    End Sub[m
 [m
[31m-End Function[m
[32m+[m[32m    Public Sub Clear_All_Sheets(ByRef wrkBook As Workbook)[m
 [m
[31m-Public Function Find_Header_Column(sheet As String, header As String) As Integer[m
[32m+[m[32m        Clear_Sheet_Type(wrkBook, "")[m
 [m
[31m-    Dim wrkSheet As Worksheet[m
[31m-    Set wrkSheet = ThisWorkbook.Sheets(sheet)[m
[31m-    [m
[31m-    Dim searchRng As Range[m
[31m-    Set searchRng = wrkSheet.Range("A1")[m
[31m-    [m
[31m-    ' Find either the column or nothing[m
[31m-    Do While searchRng <> "" And searchRng.Value <> header[m
[31m-        Set searchRng = searchRng.Offset(0, 1)[m
[31m-    Loop[m
[31m-    [m
[31m-    ' If column found, return it.[m
[31m-    ' Otherwise zero.[m
[31m-    If searchRng.Value = header Then[m
[31m-        Find_Header_Column = searchRng.Column[m
[31m-    Else[m
[31m-        Find_Header_Column = 0[m
[31m-        MsgBox "Column '" & header & "' was not found. Please contact a VBA developer.", vbOKOnly, "Error: Config Header"[m
[31m-    End If[m
[32m+[m[32m    End Sub[m
 [m
[31m-End Function[m
 [m
[31m-Public Function Hide_Sheets(ByRef x As Integer)[m
[32m+[m[32m    Public Sub Reset_Sheet(ByRef wrkBook As Workbook, sheet As String)[m
 [m
[31m-    Dim ws As Worksheet[m
[31m-    For Each ws In ThisWorkbook.Worksheets[m
[32m+[m[32m        Dim lastSht As Worksheet[m
[32m+[m[32m        lastSht = wrkBook.ActiveSheet[m
 [m
[31m-        If InStr(ws.Name, "IOTags") > 0 Then[m
[31m-            Sheets(ws.Name).Visible = False[m
[31m-        End If[m
[32m+[m[32m        ' Reset selection to A1[m
[32m+[m[32m        wrkBook.Sheets(sheet).Select[m
[32m+[m[32m        lastSht.Range("A1").Select()[m
 [m
[31m-        If InStr(ws.Name, "IOMem") > 0 Then[m
[31m-            Sheets(ws.Name).Visible = False[m
[31m-        End If[m
[32m+[m[32m        ' Return to previous sheet[m
[32m+[m[32m        lastSht.Select()[m
 [m
[31m-        If InStr(ws.Name, "Wire") > 0 Then[m
[31m-            Sheets(ws.Name).Visible = False[m
[31m-        End If[m
[32m+[m[32m    End Sub[m
 [m
[31m-        If InStr(ws.Name, "MinMax") > 0 Then[m
[31m-            Sheets(ws.Name).Visible = False[m
[31m-        End If[m
[32m+[m[32m    Public Function Find_Header_Column(ByRef wrkBook As Workbook, sheet As String, header As String) As Integer[m
[32m+[m
[32m+[m[32m        Dim wrkSheet As Worksheet = wrkBook.Sheets(sheet)[m
[32m+[m
[32m+[m[32m        Dim searchRng As Excel.Range = wrkSheet.Range("A1").Select[m
 [m
[31m-        ' Added to hide everything but instructions, since no one should care about the other sheets[m
[31m-        If Not InStr(ws.Name, "Instructions") > 0 Then[m
[31m-            Sheets(ws.Name).Visible = False[m
[32m+[m[32m        ' Find either the column or nothing[m
[32m+[m[32m        Do While searchRng.Value <> "" And searchRng.Value <> header[m
[32m+[m[32m            searchRng = searchRng.Offset(0, 1)[m
[32m+[m[32m        Loop[m
[32m+[m
[32m+[m[32m        ' If column found, return it.[m
[32m+[m[32m        ' Otherwise zero.[m
[32m+[m[32m        If searchRng.Value = header Then[m
[32m+[m[32m            Find_Header_Column = searchRng.Column[m
[32m+[m[32m        Else[m
[32m+[m[32m            Find_Header_Column = 0[m
[32m+[m[32m            MsgBox("Column '" & header & "' was not found. Please contact a VBA developer.", vbOKOnly, "Error: Config Header")[m
         End If[m
 [m
[31m-    Next ws[m
[32m+[m[32m    End Function[m
[32m+[m
[32m+[m[32m    Public Sub Hide_Sheets(ByRef wrkBook As Workbook)[m
[32m+[m
[32m+[m[32m        Dim ws As Worksheet[m
[32m+[m[32m        For Each ws In wrkBook.Worksheets[m
[32m+[m
[32m+[m[32m            If InStr(ws.Name, "IOTags") > 0 Then[m
[32m+[m[32m                ws.Visible = False[m
[32m+[m[32m            End If[m
[32m+[m
[32m+[m[32m            If InStr(ws.Name, "IOMem") > 0 Then[m
[32m+[m[32m                ws.Visible = False[m
[32m+[m[32m            End If[m
[32m+[m
[32m+[m[32m            If InStr(ws.Name, "Wire") > 0 Then[m
[32m+[m[32m                ws.Visible = False[m
[32m+[m[32m            End If[m
[32m+[m
[32m+[m[32m            If InStr(ws.Name, "MinMax") > 0 Then[m
[32m+[m[32m                ws.Visible = False[m
[32m+[m[32m            End If[m
[32m+[m
[32m+[m[32m            ' Added to hide everything but instructions, since no one should care about the other sheets[m
[32m+[m[32m            If Not InStr(ws.Name, "Instructions") > 0 Then[m
[32m+[m[32m                ws.Visible = False[m
[32m+[m[32m            End If[m
[32m+[m
[32m+[m[32m        Next ws[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Public Sub Unhide_All_Sheets(ByRef wrkBook As Workbook)[m
 [m
[31m-End Function[m
[32m+[m[32m        For Each ws In wrkBook.Worksheets[m
[32m+[m[32m            ws.Visible = True[m
[32m+[m[32m        Next ws[m
 [m
[31m-Public Function Unhide_All_Sheets(ByRef x As Integer)[m
[32m+[m[32m    End Sub[m
 [m
[31m-    For Each ws In Sheets : ws.Visible = True : Next[m
[32m+[m[32m    Public Function Worksheet_Exists(ByRef wb As Workbook, sheetName As String) As Boolean[m
 [m
[31m-End Function[m
[32m+[m[32m        Worksheet_Exists = False[m
 [m
[31m-Public Function Worksheet_Exists(sheetName As String) As Boolean[m
[32m+[m[32m        For i = 1 To wb.Worksheets.Count[m
[32m+[m[32m            If wb.Worksheets(i).Name = sheetName Then[m
[32m+[m[32m                Worksheet_Exists = True[m
[32m+[m[32m            End If[m
[32m+[m[32m        Next i[m
 [m
[31m-    Worksheet_Exists = False[m
[32m+[m[32m    End Function[m
 [m
[31m-    For i = 1 To Worksheets.Count[m
[31m-        If Worksheets(i).Name = sheetName Then[m
[31m-            Worksheet_Exists = True[m
[32m+[m[32m    Public Function Create_Output_Folder(ByRef ActiveWorkbook As Workbook) As String[m
[32m+[m
[32m+[m[32m        Dim outFolder As String[m
[32m+[m[32m        Dim topFolder As String[m
[32m+[m[32m        Dim subFolder As String[m
[32m+[m[32m        Dim pathName As String[m
[32m+[m[32m        Dim CPU_Name As String[m
[32m+[m
[32m+[m[32m        pathName = ActiveWorkbook.Path[m
[32m+[m[32m        CPU_Name = Get_CPU_Name(ActiveWorkbook)[m
[32m+[m
[32m+[m[32m        topFolder = "\PICS_Files"[m
[32m+[m[32m        subFolder = "\" & CPU_Name & Format(Now(), "_yyyymmdd_HhNnSs")[m
[32m+[m
[32m+[m[32m        outFolder = pathName & topFolder[m
[32m+[m[32m        If Len(Dir(outFolder, vbDirectory)) = 0 Then[m
[32m+[m[32m            MkDir(outFolder)[m
         End If[m
[31m-    Next i[m
[31m-[m
[31m-End Function[m
[31m-[m
[31m-Public Function Create_Output_Folder() As String[m
[31m-[m
[31m-    Dim outFolder As String[m
[31m-    Dim topFolder As String[m
[31m-    Dim subFolder As String[m
[31m-    Dim pathName As String[m
[31m-    Dim CPU_Name As String[m
[31m-    [m
[31m-    pathName = ActiveWorkbook.Path[m
[31m-    CPU_Name = Get_CPU_Name[m
[31m-    [m
[31m-    topFolder = "\PICS_Files"[m
[31m-    subFolder = "\" & CPU_Name & Format(Now(), "_yyyymmdd_HhNnSs")[m
[31m-    [m
[31m-    outFolder = pathName & topFolder[m
[31m-    If Len(Dir(outFolder, vbDirectory)) = 0 Then[m
[31m-       MkDir outFolder[m
[31m-    End If[m
[31m-    [m
[31m-    outFolder = outFolder & subFolder[m
[31m-    If Len(Dir(outFolder, vbDirectory)) = 0 Then[m
[31m-       MkDir outFolder[m
[31m-    End If[m
[31m-    [m
[31m-    Create_Output_Folder = outFolder[m
[31m-[m
[31m-End Function[m
[31m-[m
[31m-Sub Export_CSV(outFolder As String, sheetStr As String, saveName As String)[m
[31m-    [m
[31m-    savePath = outFolder & "\" & saveName[m
[31m-    [m
[31m-    Dim NewBook As Workbook[m
[31m-    Set NewBook = Workbooks.Add[m
[31m-    [m
[31m-    ThisWorkbook.Sheets(sheetStr).Visible = True[m
[31m-    [m
[31m-    ThisWorkbook.Sheets(sheetStr).Copy Before:=NewBook.Sheets(1)[m
[31m-    [m
[31m-    ThisWorkbook.Sheets(sheetStr).Visible = False[m
[31m-    [m
[31m-    Application.DisplayAlerts = False[m
[31m-    [m
[31m-    ActiveWorkbook.ActiveSheet.SaveAs fileName:=savePath, FileFormat:=xlCSV[m
[31m-    [m
[31m-    ActiveWorkbook.Close (False)[m
[31m-    [m
[31m-    Application.DisplayAlerts = True[m
[31m-    [m
[31m-End Sub[m
[31m-[m
[31m-Public Function Get_CPU_Name() As String[m
[31m-[m
[31m-    Dim CPU_Name As String[m
[31m-    CPU_Name = Worksheets("Instructions").Range("CPU_PREFIX").Cells.Value[m
[31m-[m
[31m-    If CPU_Name = "" Then[m
[31m-[m
[31m-        CPU_Name = Application.InputBox("Enter a topic name:", "Topic Name")[m
[31m-[m
[31m-        If CPU_Name = "False" Then[m
[31m-            CPU_Name = "OPC1"[m
[32m+[m
[32m+[m[32m        outFolder = outFolder & subFolder[m
[32m+[m[32m        If Len(Dir(outFolder, vbDirectory)) = 0 Then[m
[32m+[m[32m            MkDir(outFolder)[m
         End If[m
 [m
[31m-        Worksheets("Instructions").Range("CPU_PREFIX").Cells.Value = CPU_Name[m
[32m+[m[32m        Create_Output_Folder = outFolder[m
[32m+[m
[32m+[m[32m    End Function[m
[32m+[m
[32m+[m[32m    Sub Export_CSV(outFolder As String, sheetStr As String, saveName As String)[m
[32m+[m
[32m+[m[32m        ' Declare variables, create new Excel Application object[m
[32m+[m[32m        Dim XLNewApp As Excel.Application = CType(CreateObject("Excel.Application"), Excel.Application)[m
[32m+[m[32m        Dim XLNewBook As Excel.Workbook = XLNewApp.Workbooks.Add[m
[32m+[m[32m        Dim XLWrkSheet As Excel.Worksheet = CType(XLNewBook.ActiveSheet, Worksheet)[m
[32m+[m[32m        Dim savePath As String = outFolder & "\" & saveName[m
[32m+[m
[32m+[m[32m        XLWrkSheet.Sheets(sheetStr).Visible = True[m
[32m+[m[32m        XLWrkSheet.Sheets(sheetStr).Copy(Before:=XLNewBook.Sheets(1))[m
[32m+[m[32m        XLWrkSheet.Sheets(sheetStr).Visible = False[m
[32m+[m[32m        XLNewApp.DisplayAlerts = False[m
[32m+[m[32m        XLNewBook.SaveAs(Filename:=savePath, FileFormat:=xlCSV)[m
[32m+[m
[32m+[m[32m        XLNewBook.Close(False)[m
[32m+[m[32m        XLNewApp.DisplayAlerts = True[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Public Function Get_CPU_Name(ByRef wrkBook As Workbook) As String[m
[32m+[m
[32m+[m[32m        Dim CPU_Name As String = wrkBook.Sheets("Instructions").Range("CPU_PREFIX").Cells.Value[m
[32m+[m
[32m+[m[32m        If CPU_Name = "" Then[m
[32m+[m
[32m+[m[32m            CPU_Name = InputBox("Enter a topic name:", "Topic Name")[m
[32m+[m
[32m+[m[32m            If CPU_Name = "" Then[m
[32m+[m[32m                CPU_Name = "OPC1"[m
[32m+[m[32m            End If[m
[32m+[m
[32m+[m[32m            wrkBook.Sheets("Instructions").Range("CPU_PREFIX").Cells.Value = CPU_Name[m
[32m+[m
[32m+[m[32m        End If[m
 [m
[31m-    End If[m
[32m+[m[32m        Get_CPU_Name = CPU_Name[m
 [m
[31m-    Get_CPU_Name = CPU_Name[m
[32m+[m[32m    End Function[m
 [m
[31m-End Function[m
[32m+[m[32mEnd Module[m
\ No newline at end of file[m
[1mdiff --git a/PICS_Config_Builder/WireData.vb b/PICS_Config_Builder/WireData.vb[m
[1mindex 96ac4ea..d333834 100644[m
[1m--- a/PICS_Config_Builder/WireData.vb[m
[1m+++ b/PICS_Config_Builder/WireData.vb[m
[36m@@ -1,394 +1,384 @@[m
[32m+[m[32mImports Excel = Microsoft.Office.Interop.Excel[m
 [m
[31m-Public CPU_Name As String[m
[31m-Public Template_Name As String[m
[31m-[m
[31m-Sub Generate_Wire_Data(ByRef x As Integer)[m
[31m-[m
[31m-    Call Unhide_All_Sheets()[m
[31m-[m
[31m-    CPU_Name = Get_CPU_Name()[m
[31m-    Template_Name = "Object"[m
[31m-[m
[31m-    'Call Create_Wire_AIn_Sheets[m
[31m-    Call Create_Basic_Wire_Sheets("AIn", "*_Inp_?V")[m
[31m-    Call Create_Basic_Wire_Sheets("DIn", "*_Inp_PV")[m
[31m-    Call Create_Basic_Wire_Sheets("Motor", "*_Out_Run")[m
[31m-    Call Create_Basic_Wire_Sheets("ValveC", "*_Out_CV")[m
[31m-    Call Create_Basic_Wire_Sheets("ValveMO", "*_Out_Open")[m
[31m-    Call Create_Basic_Wire_Sheets("ValveSO", "*_Out")[m
[31m-    Call Create_Basic_Wire_Sheets("VSD", "*_Out_SpeedRef")[m
[31m-[m
[31m-    Call Color_Wire_Tabs()[m
[31m-[m
[31m-    Sheets("Instructions").Select[m
[31m-[m
[31m-    Call Hide_Sheets()[m
[31m-[m
[31m-End Sub[m
[31m-[m
[31m-Private Function GetRowGap(sheet As String) As Integer[m
[31m-[m
[31m-    Dim Count As Integer[m
[31m-    Count = 0[m
[31m-    [m
[31m-    Dim wrkSht As Worksheet[m
[31m-    Set wrkSht = ThisWorkbook.Sheets(sheet)[m
[31m-    [m
[31m-    Dim itemRng As Range[m
[31m-    Set itemRng = wrkSht.Range("B1")[m
[31m-    [m
[31m-    Do While ExtractNumber(itemRng.Value) = 1[m
[31m-        Set itemRng = itemRng.Offset(1, 0)[m
[31m-        Count = Count + 1[m
[31m-    Loop[m
[31m-    [m
[31m-    GetRowGap = Count[m
[31m-[m
[31m-End Function[m
[31m-[m
[31m-Private Function GetMaxItems(sheet As String) As Integer[m
[31m-[m
[31m-    Dim maxNum As String[m
[31m-    Dim toSub As String[m
[31m-    Dim lastRng As Range[m
[31m-    Set lastRng = ThisWorkbook.Sheets(sheet).Range("B1").End(xlDown)[m
[31m-    toSub = lastRng.Value[m
[31m-    [m
[31m-    GetMaxItems = ExtractNumber(toSub)[m
[31m-    [m
[31m-End Function[m
[31m-[m
[31m-Private Function ExtractNumber(str As String) As Integer[m
[31m-[m
[31m-    Dim length As Integer[m
[31m-    length = 1[m
[31m-    [m
[31m-    Do While IsNumeric(Right(str, length))[m
[31m-        length = length + 1[m
[31m-    Loop[m
[31m-    [m
[31m-    ExtractNumber = CInt(Right(str, length - 1))[m
[31m-[m
[31m-End Function[m
[31m-[m
[31m-Private Function Find_Column(sheet As String, str As String) As Integer[m
[31m-[m
[31m-    Find_Column = ThisWorkbook.Sheets(sheet).Range("A:ZZ").Find(str, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext).Column[m
[31m-[m
[31m-End Function[m
[31m-[m
[31m-' Pre-Pass OPC1 tags for existance[m
[31m-' Checks against SimData sheet for existance of OPC1 tag that it is looking to use[m
[31m-Sub ValidateOPC1(sheetStr As String)[m
[31m-[m
[31m-    Dim searchRng As Range[m
[31m-    Dim firstMatch As Range[m
[31m-    Dim wrkSht As Worksheet[m
[31m-    Set wrkSht = ThisWorkbook.Sheets(sheetStr)[m
[31m-    [m
[31m-    Set searchRng = wrkSht.Range("A1")[m
[31m-    [m
[31m-    Do While Not searchRng Is Nothing[m
[31m-    [m
[31m-        Set searchRng = wrkSht.Range("A:ZZ").Find(What:="OPC1.", After:=searchRng, LookAt:=xlPart)[m
[31m-        [m
[31m-        Dim output As String[m
[31m-        Dim parseArr As Variant[m
[31m-        Dim parse As String[m
[31m-        [m
[31m-        parse = searchRng.Value[m
[31m-        output = ""[m
[31m-        [m
[31m-        ' Check if it needs to be split[m
[31m-        If InStr(parse, "|") > 0 Then[m
[31m-            parseArr = Split(parse, "|")[m
[31m-        Else[m
[31m-            parseArr = Array(parse)[m
[31m-        End If[m
[31m-        [m
[31m-        Dim checkStr As Variant[m
[31m-        [m
[31m-        For Each checkStr In parseArr[m
[31m-            [m
[31m-            Dim tag As String[m
[31m-            Dim re As New RegExp[m
[31m-            [m
[31m-            With re[m
[31m-                .Global = False[m
[31m-                .MultiLine = False[m
[31m-                .IgnoreCase = False[m
[31m-                .Pattern = "OPC1\.\w*"[m
[31m-            End With[m
[31m-            [m
[31m-            Dim result As Object[m
[31m-            Set result = re.Execute(checkStr)[m
[31m-            [m
[31m-            tag = result(0)[m
[31m-            tag = Replace(tag, "OPC1.", "")[m
[31m-        [m
[31m-            If Is_Sim_Data(tag) Then[m
[31m-                output = checkStr[m
[31m-                Exit For[m
[31m-            End If[m
[31m-        Next[m
[31m-        [m
[31m-        searchRng.Value = output[m
[31m-        [m
[31m-        [m
[31m-        If firstMatch Is Nothing Then[m
[31m-            Set firstMatch = searchRng[m
[31m-        ElseIf searchRng = firstMatch Then[m
[31m-            Set searchRng = Nothing[m
[31m-        End If[m
[31m-    [m
[31m-    Loop[m
[31m-[m
[31m-End Sub[m
[31m-[m
[31m-Private Function Is_Sim_Data(str As String) As Boolean[m
[31m-    [m
[31m-    Dim wrkSht As Worksheet[m
[31m-    Set wrkSht = ThisWorkbook.Sheets("SimData")[m
[31m-    [m
[31m-    Dim searchRng As Range[m
[31m-    Set searchRng = wrkSht.Range("A:A").Find(str)[m
[31m-    [m
[31m-    Is_Sim_Data = Not (searchRng Is Nothing)[m
[31m-    [m
[31m-    [m
[31m-End Function[m
[31m-[m
[31m-Sub ReplaceOPC1(NewSheetName As String)[m
[31m-'[m
[31m-' Replaces OPC1. in a sheet with the CPU_Name[m
[31m-'[m
[31m-    Sheets(NewSheetName).UsedRange.Select[m
[31m-    [m
[31m-    Cells.Replace What:="OPC1.", _[m
[31m-                            Replacement:=CPU_Name & ".", _[m
[31m-                            LookAt:=xlPart, _[m
[31m-                            SearchOrder:=xlByRows, _[m
[31m-                            MatchCase:=False, _[m
[31m-                            SearchFormat:=False, _[m
[31m-                            ReplaceFormat:=False[m
[31m-    Range("A1").Select[m
[31m-[m
[31m-End Sub[m
[31m-[m
[31m-Sub Color_Wire_Tabs(ByRef x As Integer)[m
[31m-[m
[31m-    Dim ws As Worksheet[m
[31m-[m
[31m-    For Each ws In ThisWorkbook.Worksheets[m
[31m-[m
[31m-        If InStr(ws.Name, "Wire") > 0 Then[m
[31m-            Sheets(ws.Name).Tab.ColorIndex = 24[m
[31m-            If InStr(ws.Name, "Template") > 0 Then[m
[31m-                Sheets(ws.Name).Tab.ColorIndex = 49[m
[31m-            End If[m
[31m-        End If[m
[32m+[m[32mModule WireData[m
[32m+[m
[32m+[m[32m    Const xlPasteValues As Integer = Excel.XlPasteType.xlPasteValues[m
[32m+[m[32m    Const xlWhole As Integer = Excel.XlLookAt.xlWhole[m
[32m+[m[32m    Const xlPart As Integer = Excel.XlLookAt.xlPart[m
[32m+[m[32m    Const xlByRows As Integer = Excel.XlSearchOrder.xlByRows[m
[32m+[m[32m    Const xlNext As Integer = Excel.XlSearchDirection.xlNext[m
[32m+[m[32m    Const xlTextWindows As Integer = Excel.XlFileFormat.xlTextWindows[m
[32m+[m
[32m+[m
[32m+[m[32m    Public CPU_Name As String[m
[32m+[m[32m    Public Template_Name As String[m
[32m+[m
[32m+[m[32m    Sub Generate_Wire_Data(ByRef wrkBook As Workbook)[m
[32m+[m
[32m+[m[32m        Call Unhide_All_Sheets(wrkBook)[m
[32m+[m
[32m+[m[32m        CPU_Name = Get_CPU_Name(wrkBook)[m
[32m+[m[32m        Template_Name = "Object"[m
[32m+[m
[32m+[m[32m        'Call Create_Wire_AIn_Sheets[m
[32m+[m[32m        Call Create_Basic_Wire_Sheets(wrkBook, "AIn", "*_Inp_?V")[m
[32m+[m[32m        Call Create_Basic_Wire_Sheets(wrkBook, "DIn", "*_Inp_PV")[m
[32m+[m[32m        Call Create_Basic_Wire_Sheets(wrkBook, "Motor", "*_Out_Run")[m
[32m+[m[32m        Call Create_Basic_Wire_Sheets(wrkBook, "ValveC", "*_Out_CV")[m
[32m+[m[32m        Call Create_Basic_Wire_Sheets(wrkBook, "ValveMO", "*_Out_Open")[m
[32m+[m[32m        Call Create_Basic_Wire_Sheets(wrkBook, "ValveSO", "*_Out")[m
[32m+[m[32m        Call Create_Basic_Wire_Sheets(wrkBook, "VSD", "*_Out_SpeedRef")[m
[32m+[m
[32m+[m[32m        Call Color_Wire_Tabs(wrkBook)[m
[32m+[m
[32m+[m[32m        wrkBook.Sheets("Instructions").Select[m
[32m+[m
[32m+[m[32m        Call Hide_Sheets(wrkBook)[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Private Function GetRowGap(ByRef wrkBook As Workbook, sheet As String) As Integer[m
[32m+[m
[32m+[m[32m        Dim Count As Integer[m
[32m+[m[32m        Count = 0[m
[32m+[m
[32m+[m[32m        Dim wrkSht As Worksheet[m
[32m+[m[32m        wrkSht = wrkBook.Sheets(sheet)[m
[32m+[m
[32m+[m[32m        Dim itemRng As Excel.Range[m
[32m+[m[32m        itemRng = wrkSht.Range("B1")[m
[32m+[m
[32m+[m[32m        Do While ExtractNumber(itemRng.Value) = 1[m
[32m+[m[32m            itemRng = itemRng.Offset(1, 0)[m
[32m+[m[32m            Count = Count + 1[m
[32m+[m[32m        Loop[m
[32m+[m
[32m+[m[32m        GetRowGap = Count[m
[32m+[m
[32m+[m[32m    End Function[m
[32m+[m
[32m+[m[32m    Private Function GetMaxItems(ByRef wrkBook As Workbook, sheet As String) As Integer[m
[32m+[m
[32m+[m[32m        Dim toSub As String[m
[32m+[m[32m        Dim lastRng As Excel.Range[m
[32m+[m[32m        lastRng = wrkBook.Sheets(sheet).Range("B1").End.xlDown[m
[32m+[m[32m        toSub = lastRng.Value[m
[32m+[m
[32m+[m[32m        GetMaxItems = ExtractNumber(toSub)[m
[32m+[m
[32m+[m[32m    End Function[m
[32m+[m
[32m+[m[32m    Private Function ExtractNumber(str As String) As Integer[m
[32m+[m
[32m+[m[32m        Dim length As Integer[m
[32m+[m[32m        length = 1[m
[32m+[m
[32m+[m[32m        Do While IsNumeric(Right(str, length))[m
[32m+[m[32m            length = length + 1[m
[32m+[m[32m        Loop[m
[32m+[m
[32m+[m[32m        ExtractNumber = CInt(Right(str, length - 1))[m
[32m+[m
[32m+[m[32m    End Function[m
 [m
[31m-    Next ws[m
[32m+[m[32m    Private Function Find_Column(ByRef wrkBook As Workbook, sheet As String, str As String) As Integer[m
 [m
[31m-End Sub[m
[32m+[m[32m        Find_Column = wrkBook.Sheets(sheet).Range("A:ZZ").Find(str, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext).Column[m
 [m
[31m-Sub Delete_Wire_Sheets(sheetTemplate As String)[m
[32m+[m[32m    End Function[m
 [m
[31m-    Dim sheetName As String[m
[31m-    Dim ws As Worksheet[m
[31m-    [m
[31m-    For i = 1 To 100     'Increase this value if there are ever more than 15 Wire Sheets[m
[31m-        sheetName = Replace(sheetTemplate, " Template", "_") & i[m
[31m-    [m
[31m-        ' Deletes existing sheets if necesary[m
[31m-        For Each ws In ThisWorkbook.Worksheets[m
[31m-            If ws.Name = sheetName Then[m
[31m-                Application.DisplayAlerts = False[m
[31m-                ws.Delete[m
[31m-                Application.DisplayAlerts = True[m
[32m+[m[32m    Sub ValidateOPC1(ByRef wrkBook As Workbook, sheetStr As String)[m
[32m+[m[32m        '[m
[32m+[m[32m        ' Pre-Pass OPC1 tags for existance[m
[32m+[m[32m        ' Checks against SimData sheet for existance of OPC1 tag that it is looking to use[m
[32m+[m
[32m+[m[32m        Dim searchRng As Excel.Range, firstMatch As Excel.Range = Nothing[m
[32m+[m
[32m+[m[32m        Dim wrkSht As Worksheet[m
[32m+[m
[32m+[m[32m        wrkSht = wrkBook.Sheets(sheetStr)[m
[32m+[m
[32m+[m[32m        searchRng = wrkSht.Range("A1").Value[m
[32m+[m
[32m+[m[32m        Do While Not searchRng Is Nothing[m
[32m+[m
[32m+[m[32m            searchRng = wrkSht.Range("A:ZZ").Find(What:="OPC1.", After:=searchRng, LookAt:=xlPart)[m
[32m+[m
[32m+[m[32m            Dim output, parseArr(), parse As String[m
[32m+[m
[32m+[m[32m            parseArr = Nothing[m
[32m+[m
[32m+[m[32m            parse = searchRng.Value[m
[32m+[m[32m            output = ""[m
[32m+[m
[32m+[m[32m            ' Check if it needs to be split[m
[32m+[m[32m            If InStr(parse, "|") > 0 Then[m
[32m+[m[32m                parseArr = parse.Split("|")[m
[32m+[m[32m            Else[m
[32m+[m[32m                parseArr.SetValue(parse, 0)[m
             End If[m
[31m-        Next ws[m
[31m-    Next i[m
[31m-    [m
[31m-End Sub[m
[31m-[m
[31m-Sub Create_Basic_Wire_Sheets(typeStr As String, countStr As String)[m
[31m-[m
[31m-    Dim sheetTemplate As String[m
[31m-    sheetTemplate = "Wire_" & typeStr & " Template"[m
[31m-    [m
[31m-    Dim sourceSheet As String[m
[31m-    sourceSheet = "IOTags - " & typeStr[m
[31m-    [m
[31m-    Dim minMaxSheet As String[m
[31m-    minMaxSheet = "MinMax - " & typeStr[m
[31m-    [m
[31m-    Dim minMax As Boolean[m
[31m-    minMax = Worksheet_Exists(minMaxSheet)[m
[31m-    [m
[31m-    Dim sSht As Worksheet[m
[31m-    Set sSht = ThisWorkbook.Sheets(sourceSheet)[m
[31m-    [m
[31m-    RowGap = GetRowGap(sheetTemplate)[m
[31m-    [m
[31m-    ItemCount = Application.WorksheetFunction.CountIf(sSht.Range("A:A"), countStr)[m
[31m-    maxItemCount = GetMaxItems(sheetTemplate)[m
[31m-    ReqSheets = Application.WorksheetFunction.RoundUp(ItemCount / maxItemCount, 0)[m
[31m-    [m
[31m-    Dim itemRng As Range[m
[31m-    Set itemRng = sSht.Range("A1")[m
[31m-    [m
[31m-    Call Delete_Wire_Sheets(sheetTemplate)[m
[31m-    [m
[31m-    If minMax Then[m
[31m-    [m
[31m-        InMinCol = Find_Column(minMaxSheet, "InputMin")[m
[31m-        InMaxCol = Find_Column(minMaxSheet, "InputMax")[m
[31m-        OutMinCol = Find_Column(minMaxSheet, "OutputMin")[m
[31m-        OutMaxCol = Find_Column(minMaxSheet, "OutputMax")[m
[31m-        [m
[31m-        If typeStr = "AIn" Then[m
[31m-        [m
[31m-            EUMinCol = Find_Column(sheetTemplate, "iAI_EU_Min") + 1[m
[31m-            EUMaxCol = Find_Column(sheetTemplate, "iAI_EU_Max") + 1[m
[31m-            RawMinCol = Find_Column(sheetTemplate, "iAI_Raw_Min") + 1[m
[31m-            RawMaxCol = Find_Column(sheetTemplate, "iAI_Raw_Max") + 1[m
[31m-            RawFltCol = Find_Column(sheetTemplate, "iAI_Raw_Flt") + 1[m
[31m-        [m
[31m-        End If[m
[31m-    [m
[31m-    End If[m
[31m-    [m
[31m-    For shtIndex = 1 To ReqSheets[m
[31m-    [m
[31m-        Dim NewSheetName As String[m
[31m-        NewSheetName = Replace(sheetTemplate, " Template", "_") & shtIndex[m
[31m-        [m
[31m-        Sheets(sheetTemplate).Copy Before:=Sheets("Wire_AIn Template")[m
[31m-        ActiveSheet.Unprotect[m
[31m-        ActiveSheet.Name = NewSheetName[m
[31m-        [m
[31m-        Range("A1").Cells.Value = "_Wire_" & typeStr & "_" & shtIndex[m
[31m-        For itemIndex = 1 To maxItemCount[m
[31m-            [m
[31m-            Dim nextRng As Range[m
[31m-            Set nextRng = sSht.Range("A:A").Find(countStr, itemRng)[m
[31m-            [m
[31m-            ' If there is another item to add[m
[31m-            If nextRng.Row > itemRng.Row Then[m
[31m-            [m
[31m-                Dim itemNum As String[m
[31m-                itemNum = Right("00" & itemIndex, 2)[m
[31m-                [m
[31m-                Dim searchStr As String[m
[31m-                searchStr = Replace(countStr, "*", "")[m
[31m-                searchStr = Replace(searchStr, "?", "\w")[m
[31m-                [m
[32m+[m
[32m+[m[32m            Dim checkStr As String[m
[32m+[m
[32m+[m[32m            For Each checkStr In parseArr[m
[32m+[m
[32m+[m[32m                Dim tag As String[m
                 Dim re As New RegExp[m
[31m-                [m
[32m+[m
                 With re[m
[31m-                    .Global = True[m
[31m-                    .MultiLine = True[m
[32m+[m[32m                    .Global = False[m
[32m+[m[32m                    .Multiline = False[m
                     .IgnoreCase = False[m
[31m-                    .Pattern = searchStr[m
[32m+[m[32m                    .Pattern = "OPC1\.\w*"[m
                 End With[m
[31m-                [m
[31m-                TagName = re.Replace(nextRng.Value, "")[m
[31m-                [m
[31m-                ActiveSheet.Cells.Replace What:=Template_Name & itemNum, Replacement:=TagName, LookAt:=xlPart, _[m
[31m-                    SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False[m
[31m-                [m
[31m-                If minMax Then[m
[31m-                    If typeStr = "AIn" Then[m
[31m-                    [m
[31m-                        Dim EU_Min As Double[m
[31m-                        Dim EU_Max As Double[m
[31m-                        Dim Raw_Min As Double[m
[31m-                        Dim Raw_Max As Double[m
[31m-                        Dim Raw_Flt As Double[m
[31m-                        [m
[31m-                        CurrentRow = RowGap * (itemIndex - 1) + 1[m
[31m-                        ItemRow = Worksheets(minMaxSheet).Range("A:A").Find(nextRng.Value).Row[m
[31m-                        EU_Min = Worksheets(minMaxSheet).Cells(ItemRow, InMinCol).Value[m
[31m-                        EU_Max = Worksheets(minMaxSheet).Cells(ItemRow, InMaxCol).Value[m
[31m-                        Raw_Min = Worksheets(minMaxSheet).Cells(ItemRow, OutMinCol).Value[m
[31m-                        Raw_Max = Worksheets(minMaxSheet).Cells(ItemRow, OutMaxCol).Value[m
[31m-                        Raw_Flt = 0.8 * Raw_Min[m
[31m-                        [m
[31m-                        If Raw_Max > 0 Then[m
[31m-                            Cells(CurrentRow, EUMinCol).Cells.Value = EU_Min[m
[31m-                            Cells(CurrentRow, EUMaxCol).Cells.Value = EU_Max[m
[31m-                            Cells(CurrentRow, RawMinCol).Cells.Value = Raw_Min[m
[31m-                            Cells(CurrentRow, RawMaxCol).Cells.Value = Raw_Max[m
[31m-                            Cells(CurrentRow, RawFltCol).Cells.Value = Raw_Flt[m
[32m+[m
[32m+[m[32m                Dim result As Object[m
[32m+[m[32m                result = re.Execute(checkStr)[m
[32m+[m
[32m+[m[32m                tag = result(0)[m
[32m+[m[32m                tag = Replace(tag, "OPC1.", "")[m
[32m+[m
[32m+[m[32m                If Is_Sim_Data(wrkBook, tag) Then[m
[32m+[m[32m                    output = checkStr[m
[32m+[m[32m                    Exit For[m
[32m+[m[32m                End If[m
[32m+[m[32m            Next[m
[32m+[m
[32m+[m[32m            searchRng.Value = output[m
[32m+[m
[32m+[m
[32m+[m[32m            If firstMatch Is Nothing Then[m
[32m+[m[32m                firstMatch = searchRng[m
[32m+[m[32m            ElseIf searchRng.Value = firstMatch.Value Then[m
[32m+[m[32m                searchRng = Nothing[m
[32m+[m[32m            End If[m
[32m+[m
[32m+[m[32m        Loop[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Private Function Is_Sim_Data(ByRef wrkBook As Workbook, str As String) As Boolean[m
[32m+[m
[32m+[m[32m        Dim wrkSht As Worksheet = wrkBook.Sheets("SimData")[m
[32m+[m
[32m+[m[32m        Dim searchRng As Excel.Range[m
[32m+[m[32m        searchRng = wrkSht.Range("A:A").Find(str)[m
[32m+[m
[32m+[m[32m        Is_Sim_Data = Not (searchRng Is Nothing)[m
[32m+[m
[32m+[m[32m    End Function[m
[32m+[m
[32m+[m[32m    Sub ReplaceOPC1(ByRef wrkBook As Workbook, NewSheetName As String)[m
[32m+[m[32m        '[m
[32m+[m[32m        ' Replaces OPC1. in a sheet with the CPU_Name[m
[32m+[m[32m        '[m
[32m+[m[32m        wrkBook.Sheets(NewSheetName).UsedRange.Select[m
[32m+[m
[32m+[m[32m        wrkBook.Sheets(NewSheetName).Cells.Replace(What:="OPC1.",[m
[32m+[m[32m                            Replacement:=CPU_Name & ".",[m
[32m+[m[32m                            LookAt:=xlPart,[m
[32m+[m[32m                            SearchOrder:=xlByRows,[m
[32m+[m[32m                            MatchCase:=False,[m
[32m+[m[32m                            SearchFormat:=False,[m
[32m+[m[32m                            ReplaceFormat:=False)[m
[32m+[m[32m        wrkBook.Sheets(NewSheetName).Range("A1").Select[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Sub Color_Wire_Tabs(ByRef wb As Workbook)[m
[32m+[m
[32m+[m[32m        Dim ws As Worksheet[m
[32m+[m
[32m+[m[32m        For Each ws In wb.Worksheets[m
[32m+[m
[32m+[m[32m            If InStr(ws.Name, "Wire") > 0 Then[m
[32m+[m[32m                wb.Sheets(ws.Name).Tab.ColorIndex = 24[m
[32m+[m[32m                If InStr(ws.Name, "Template") > 0 Then[m
[32m+[m[32m                    wb.Sheets(ws.Name).Tab.ColorIndex = 49[m
[32m+[m[32m                End If[m
[32m+[m[32m            End If[m
[32m+[m
[32m+[m[32m        Next ws[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Sub Delete_Wire_Sheets(ByRef wb As Workbook, sheetTemplate As String)[m
[32m+[m
[32m+[m[32m        Dim sheetName As String[m
[32m+[m[32m        Dim ws As Worksheet[m
[32m+[m
[32m+[m[32m        For i = 1 To 100     'Increase this value if there are ever more than 15 Wire Sheets[m
[32m+[m[32m            sheetName = Replace(sheetTemplate, " Template", "_") & i[m
[32m+[m
[32m+[m[32m            ' Deletes existing sheets if necessary[m
[32m+[m[32m            For Each ws In wb.Worksheets[m
[32m+[m[32m                If ws.Name = sheetName Then[m
[32m+[m[32m                    wb.Application.DisplayAlerts = False[m
[32m+[m[32m                    ws.Delete()[m
[32m+[m[32m                    wb.Application.DisplayAlerts = True[m
[32m+[m[32m                End If[m
[32m+[m[32m            Next ws[m
[32m+[m[32m        Next i[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Sub Create_Basic_Wire_Sheets(ByRef wb As Workbook, typeStr As String, countStr As String)[m
[32m+[m
[32m+[m[32m        Dim sheetTemplate As String = "Wire_" & typeStr & " Template"[m
[32m+[m[32m        Dim sourceSheet As String = "IOTags - " & typeStr[m
[32m+[m[32m        Dim minMaxSheet As String = "MinMax - " & typeStr[m
[32m+[m[32m        Dim minMax As Boolean = Worksheet_Exists(wb, minMaxSheet)[m
[32m+[m[32m        Dim ws As Worksheet = wb.Sheets(sourceSheet).Select[m
[32m+[m[32m        Dim RowGap As Integer = GetRowGap(wb, sheetTemplate)[m
[32m+[m[32m        Dim ItemCount As Integer = ws.Cells.CountIf("A:A", countStr)[m
[32m+[m[32m        Dim maxItemCount As Integer = GetMaxItems(wb, sheetTemplate)[m
[32m+[m[32m        Dim ReqSheets As Integer = ws.Cells.RoundUp(ItemCount / maxItemCount, 0)[m
[32m+[m[32m        Dim itemRng As Excel.Range = ws.Range("A1")[m
[32m+[m[32m        Dim InMinCol, InMaxCol, OutMinCol, OutMaxCol As Integer[m
[32m+[m[32m        Dim EUMinCol, EUMaxCol, RawMinCol, RawMaxCol, RawFltCol As Integer[m
[32m+[m
[32m+[m[32m        Call Delete_Wire_Sheets(wb, sheetTemplate)[m
[32m+[m
[32m+[m[32m        If minMax Then[m
[32m+[m
[32m+[m[32m            InMinCol = Find_Column(wb, minMaxSheet, "InputMin")[m
[32m+[m[32m            InMaxCol = Find_Column(wb, minMaxSheet, "InputMax")[m
[32m+[m[32m            OutMinCol = Find_Column(wb, minMaxSheet, "OutputMin")[m
[32m+[m[32m            OutMaxCol = Find_Column(wb, minMaxSheet, "OutputMax")[m
[32m+[m
[32m+[m[32m            If typeStr = "AIn" Then[m
[32m+[m
[32m+[m[32m                EUMinCol = Find_Column(wb, sheetTemplate, "iAI_EU_Min") + 1[m
[32m+[m[32m                EUMaxCol = Find_Column(wb, sheetTemplate, "iAI_EU_Max") + 1[m
[32m+[m[32m                RawMinCol = Find_Column(wb, sheetTemplate, "iAI_Raw_Min") + 1[m
[32m+[m[32m                RawMaxCol = Find_Column(wb, sheetTemplate, "iAI_Raw_Max") + 1[m
[32m+[m[32m                RawFltCol = Find_Column(wb, sheetTemplate, "iAI_Raw_Flt") + 1[m
[32m+[m
[32m+[m[32m            End If[m
[32m+[m
[32m+[m[32m        End If[m
[32m+[m
[32m+[m[32m        For shtIndex = 1 To ReqSheets[m
[32m+[m
[32m+[m[32m            Dim NewSheetName As String = Strings.Replace(sheetTemplate, " Template", "_") & shtIndex[m
[32m+[m
[32m+[m[32m            wb.Sheets(sheetTemplate).Copy(Before:=wb.Sheets("Wire_AIn Template"))[m
[32m+[m[32m            wb.ActiveSheet.Unprotect[m
[32m+[m[32m            wb.ActiveSheet.Name = NewSheetName[m
[32m+[m[32m            Dim wrkSheet As Worksheet = wb.ActiveSheet.Name[m
[32m+[m[32m            wrkSheet.Range("A1").Cells.Value = "_Wire_" & typeStr & "_" & shtIndex[m
[32m+[m
[32m+[m[32m            For itemIndex = 1 To maxItemCount[m
[32m+[m
[32m+[m[32m                Dim nextRng As Excel.Range[m
[32m+[m[32m                nextRng = ws.Range("A:A").Find(countStr, itemRng)[m
[32m+[m
[32m+[m[32m                ' If there is another item to add[m
[32m+[m[32m                If nextRng.Row > itemRng.Row Then[m
[32m+[m
[32m+[m[32m                    Dim itemNum As String[m
[32m+[m[32m                    itemNum = Right("00" & itemIndex, 2)[m
[32m+[m
[32m+[m[32m                    Dim searchStr As String[m
[32m+[m[32m                    searchStr = Replace(countStr, "*", "")[m
[32m+[m[32m                    searchStr = Replace(searchStr, "?", "\w")[m
[32m+[m
[32m+[m[32m                    Dim re As New RegExp[m
[32m+[m
[32m+[m[32m                    With re[m
[32m+[m[32m                        .Global = True[m
[32m+[m[32m                        .Multiline = True[m
[32m+[m[32m                        .IgnoreCase = False[m
[32m+[m[32m                        .Pattern = searchStr[m
[32m+[m[32m                    End With[m
[32m+[m
[32m+[m[32m                    Dim TagName = re.Replace(nextRng.Value, "")[m
[32m+[m
[32m+[m[32m                    wrkSheet.Cells.Replace(What:=Template_Name & itemNum, Replacement:=TagName, LookAt:=xlPart,[m
[32m+[m[32m                                             SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False)[m
[32m+[m
[32m+[m[32m                    If minMax Then[m
[32m+[m[32m                        If typeStr = "AIn" Then[m
[32m+[m
[32m+[m[32m                            Dim EU_Min, EU_Max, Raw_Min, Raw_Max, Raw_Flt As Double[m
[32m+[m
[32m+[m[32m                            Dim CurrentRow As Integer = RowGap * (itemIndex - 1) + 1[m
[32m+[m[32m                            Dim ItemRow As Excel.Range = wb.Sheets(minMaxSheet).Range("A:A").Find(nextRng.Value).Row[m
[32m+[m[32m                            EU_Min = wb.Sheets(minMaxSheet).Cells(ItemRow, InMinCol).Value[m
[32m+[m[32m                            EU_Max = wb.Sheets(minMaxSheet).Cells(ItemRow, InMaxCol).Value[m
[32m+[m[32m                            Raw_Min = wb.Sheets(minMaxSheet).Cells(ItemRow, OutMinCol).Value[m
[32m+[m[32m                            Raw_Max = wb.Sheets(minMaxSheet).Cells(ItemRow, OutMaxCol).Value[m
[32m+[m[32m                            Raw_Flt = 0.8 * Raw_Min[m
[32m+[m
[32m+[m[32m                            If Raw_Max > 0 Then[m
[32m+[m[32m                                wrkSheet.Cells(CurrentRow, EUMinCol).Cells.Value = EU_Min[m
[32m+[m[32m                                wrkSheet.Cells(CurrentRow, EUMaxCol).Cells.Value = EU_Max[m
[32m+[m[32m                                wrkSheet.Cells(CurrentRow, RawMinCol).Cells.Value = Raw_Min[m
[32m+[m[32m                                wrkSheet.Cells(CurrentRow, RawMaxCol).Cells.Value = Raw_Max[m
[32m+[m[32m                                wrkSheet.Cells(CurrentRow, RawFltCol).Cells.Value = Raw_Flt[m
[32m+[m[32m                            End If[m
[32m+[m
                         End If[m
[31m-                        [m
                     End If[m
[32m+[m
[32m+[m[32m                    itemRng = nextRng.Offset(1, 0)[m
[32m+[m
                 End If[m
 [m
[31m-                Set itemRng = nextRng.Offset(1, 0)[m
[31m-            [m
[31m-            End If[m
[32m+[m[32m            Next[m
[32m+[m
[32m+[m[32m            wrkSheet.Range("A1").Select()[m
 [m
[32m+[m[32m            Call ValidateOPC1(wb, NewSheetName)[m
[32m+[m[32m            Call ReplaceOPC1(wb, NewSheetName)[m
         Next[m
[31m-        [m
[31m-        Range("A1").Select[m
[31m-        [m
[31m-        Call ValidateOPC1(NewSheetName)[m
[31m-        Call ReplaceOPC1(NewSheetName)[m
[31m-    Next[m
[31m-[m
[31m-End Sub[m
[31m-[m
[31m-Sub Export_Wire_Data(outFolder As String)[m
[31m-    [m
[31m-    Application.DisplayAlerts = False[m
[31m-    [m
[31m-    Dim ws As Worksheet[m
[31m-    Dim book As Workbook[m
[31m-    Dim wsName As String[m
[31m-    Dim savePath As String[m
[31m-    [m
[31m-    savePath = outFolder & "\"[m
[31m-    [m
[31m-    Save_Sheets "AIn", savePath[m
[31m-    Save_Sheets "DIn", savePath[m
[31m-    Save_Sheets "Motor", savePath[m
[31m-    Save_Sheets "ValveC", savePath[m
[31m-    Save_Sheets "ValveMO", savePath[m
[31m-    Save_Sheets "ValveSO", savePath[m
[31m-    Save_Sheets "VSD", savePath[m
[31m-[m
[31m-    Application.DisplayAlerts = True[m
[31m-[m
[31m-End Sub[m
[31m-[m
[31m-Private Function Save_Sheets(typeStr As String, savePath As String)[m
[31m-[m
[31m-    Dim i As Integer[m
[31m-    i = 1[m
[31m-    [m
[31m-    Dim wsName As String[m
[31m-    wsName = "Wire_" & typeStr & "_" & i[m
[31m-    [m
[31m-    Do While Worksheet_Exists(wsName)[m
[31m-[m
[31m-        Dim book As Workbook[m
[31m-        Set book = Workbooks.Add[m
[31m-        Count = book.Worksheets.Count[m
[31m-        ThisWorkbook.Sheets(wsName).Copy book.Worksheets(1)[m
[31m-        [m
[31m-        book.Worksheets(1).Range("A1").EntireRow.Insert[m
[31m-        book.Worksheets(1).Range("A1").Value = ";PICS for Windows - Device Wiring Export V1.10"[m
[31m-        [m
[31m-        [m
[31m-        book.Worksheets(1).SaveAs savePath & wsName & ".wir", xlTextWindows[m
[31m-        book.Close False[m
[31m-        Set book = Nothing[m
[31m-            [m
[31m-        i = i + 1[m
[31m-        wsName = "Wire_" & typeStr & "_" & i[m
[31m-        [m
[31m-    Loop[m
[31m-[m
[31m-End Function[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Sub Export_Wire_Data(ByRef wb As Workbook, outFolder As String)[m
[32m+[m
[32m+[m[32m        Dim savePath As String[m
[32m+[m
[32m+[m[32m        wb.Application.DisplayAlerts = False[m
[32m+[m
[32m+[m[32m        savePath = outFolder & "\"[m
[32m+[m
[32m+[m[32m        Save_Sheets(wb, "AIn", savePath)[m
[32m+[m[32m        Save_Sheets(wb, "DIn", savePath)[m
[32m+[m[32m        Save_Sheets(wb, "Motor", savePath)[m
[32m+[m[32m        Save_Sheets(wb, "ValveC", savePath)[m
[32m+[m[32m        Save_Sheets(wb, "ValveMO", savePath)[m
[32m+[m[32m        Save_Sheets(wb, "ValveSO", savePath)[m
[32m+[m[32m        Save_Sheets(wb, "VSD", savePath)[m
[32m+[m
[32m+[m[32m        wb.Application.DisplayAlerts = True[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32m    Private Sub Save_Sheets(ByRef wb As Workbook, typeStr As String, savePath As String)[m
[32m+[m
[32m+[m[32m        Dim i As Integer = 1[m
[32m+[m[32m        Dim wsName As String = "Wire_" & typeStr & "_" & i[m
[32m+[m
[32m+[m[32m        Do While Worksheet_Exists(wb, wsName)[m
[32m+[m
[32m+[m[32m            Dim book As Workbook[m
[32m+[m
[32m+[m[32m            book = CreateObject("Excel.Application")[m
[32m+[m[32m            Dim Count As Integer = book.Worksheets.Count[m
[32m+[m[32m            book.Sheets(wsName).Copy(book.Worksheets(1))[m
[32m+[m
[32m+[m[32m            book.Worksheets(1).Range("A1").EntireRow.Insert[m
[32m+[m[32m            book.Worksheets(1).Range("A1").Value = ";PICS for Windows - Device Wiring Export V1.10"[m
[32m+[m[32m            book.Worksheets(1).SaveAs(savePath & wsName & ".wir", xlTextWindows)[m
[32m+[m[32m            book.Close(False)[m
[32m+[m[32m            book = Nothing[m
[32m+[m
[32m+[m[32m            i = i + 1[m
[32m+[m[32m            wsName = "Wire_" & typeStr & "_" & i[m
[32m+[m
[32m+[m[32m        Loop[m
[32m+[m
[32m+[m[32m    End Sub[m
[32m+[m
[32m+[m[32mEnd Module[m
[1mdiff --git a/PICS_Config_Builder/bin/Debug/PICS_Config_Builder.exe b/PICS_Config_Builder/bin/Debug/PICS_Config_Builder.exe[m
[1mnew file mode 100644[m
[1mindex 0000000..70fc207[m
Binary files /dev/null and b/PICS_Config_Builder/bin/Debug/PICS_Config_Builder.exe differ
[1mdiff --git a/PICS_Config_Builder/bin/Debug/PICS_Config_Builder.exe.config b/PICS_Config_Builder/bin/Debug/PICS_Config_Builder.exe.config[m
[1mnew file mode 100644[m
[1mindex 0000000..5534e28[m
[1m--- /dev/null[m
[1m+++ b/PICS_Config_Builder/bin/Debug/PICS_Config_Builder.exe.config[m
[36m@@ -0,0 +1,6 @@[m
[32m+[m[32mï»¿<?xml version="1.0" encoding="utf-8" ?>[m
[32m+[m[32m<configuration>[m
[32m+[m[32m    <startup>[m
[32m+[m[32m        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1" />[m
[32m+[m[32m    </startup>[m
[32m+[m[32m</configuration>[m
\ No newline at end of file[m
[1mdiff --git a/PICS_Config_Builder/bin/Debug/PICS_Config_Builder.pdb b/PICS_Config_Builder/bin/Debug/PICS_Config_Builder.pdb[m
[1mnew file mode 100644[m
[1mindex 0000000..1b233d1[m
Binary files /dev/null and b/PICS_Config_Builder/bin/Debug/PICS_Config_Builder.pdb differ
[1mdiff --git a/PICS_Config_Builder/bin/Debug/PICS_Config_Builder.xml b/PICS_Config_Builder/bin/Debug/PICS_Config_Builder.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..6fb3972[m
[1m--- /dev/null[m
[1m+++ b/PICS_Config_Builder/bin/Debug/PICS_Config_Builder.xml[m
[36m@@ -0,0 +1,26 @@[m
[32m+[m[32mï»¿<?xml version="1.0"?>[m
[32m+[m[32m<doc>[m
[32m+[m[32m<assembly>[m
[32m+[m[32m<name>[m
[32m+[m[32mPICS_Config_Builder[m
[32m+[m[32m</name>[m
[32m+[m[32m</assembly>[m
[32m+[m[32m<members>[m
[32m+[m[32m<member name="T:PICS_Config_Builder.My.Resources.Resources">[m
[32m+[m[32m<summary>[m
[32m+[m[32m  A strongly-typed resource class, for looking up localized strings, etc.[m
[32m+[m[32m</summary>[m
[32m+[m[32m</member>[m
[32m+[m[32m<member name="P:PICS_Config_Builder.My.Resources.Resources.ResourceManager">[m
[32m+[m[32m<summary>[m
[32m+[m[32m  Returns the cached ResourceManager instance used by this class.[m
[32m+[m[32m</summary>[m
[32m+[m[32m</member>[m
[32m+[m[32m<member name="P:PICS_Config_Builder.My.Resources.Resources.Culture">[m
[32m+[m[32m<summary>[m
[32m+[m[32m  Overrides the current thread's CurrentUICulture property for all[m
[32m+[m[32m  resource lookups using this strongly typed resource class.[m
[32m+[m[32m</summary>[m
[32m+[m[32m</member>[m
[32m+[m[32m</members>[m
[32m+[m[32m</doc>[m
[1mdiff --git a/PICS_Config_Builder/obj/Debug/DesignTimeResolveAssemblyReferences.cache b/PICS_Config_Builder/obj/Debug/DesignTimeResolveAssemblyReferences.cache[m
[1mnew file mode 100644[m
[1mindex 0000000..a84e343[m
Binary files /dev/null and b/PICS_Config_Builder/obj/Debug/DesignTimeResolveAssemblyReferences.cache differ
[1mdiff --git a/PICS_Config_Builder/obj/Debug/DesignTimeResolveAssemblyReferencesInput.cache b/PICS_Config_Builder/obj/Debug/DesignTimeResolveAssemblyReferencesInput.cache[m
[1mnew file mode 100644[m
[1mindex 0000000..a95d414[m
Binary files /dev/null and b/PICS_Config_Builder/obj/Debug/DesignTimeResolveAssemblyReferencesInput.cache differ
[1mdiff --git a/PICS_Config_Builder/obj/Debug/Interop.VBScript_RegExp_55.dll b/PICS_Config_Builder/obj/Debug/Interop.VBScript_RegExp_55.dll[m
[1mnew file mode 100644[m
[1mindex 0000000..0b265f0[m
Binary files /dev/null and b/PICS_Config_Builder/obj/Debug/Interop.VBScript_RegExp_55.dll differ
[1mdiff --git a/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.Form1.resources b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.Form1.resources[m
[1mnew file mode 100644[m
[1mindex 0000000..6c05a97[m
Binary files /dev/null and b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.Form1.resources differ
[1mdiff --git a/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.Resources.resources b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.Resources.resources[m
[1mnew file mode 100644[m
[1mindex 0000000..6c05a97[m
Binary files /dev/null and b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.Resources.resources differ
[1mdiff --git a/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.exe b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.exe[m
[1mnew file mode 100644[m
[1mindex 0000000..70fc207[m
Binary files /dev/null and b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.exe differ
[1mdiff --git a/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.pdb b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.pdb[m
[1mnew file mode 100644[m
[1mindex 0000000..1b233d1[m
Binary files /dev/null and b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.pdb differ
[1mdiff --git a/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.vbproj.CoreCompileInputs.cache b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.vbproj.CoreCompileInputs.cache[m
[1mnew file mode 100644[m
[1mindex 0000000..32574b9[m
[1m--- /dev/null[m
[1m+++ b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.vbproj.CoreCompileInputs.cache[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32m646cf6dca8dcd72bd3090dc382af3fc8f77e04e1[m
[1mdiff --git a/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.vbproj.FileListAbsolute.txt b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.vbproj.FileListAbsolute.txt[m
[1mnew file mode 100644[m
[1mindex 0000000..1713406[m
[1m--- /dev/null[m
[1m+++ b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.vbproj.FileListAbsolute.txt[m
[36m@@ -0,0 +1,14 @@[m
[32m+[m[32mC:\Users\c.crane\source\repos\PICS_Config_Builder\PICS_Config_Builder\bin\Debug\PICS_Config_Builder.exe.config[m
[32m+[m[32mC:\Users\c.crane\source\repos\PICS_Config_Builder\PICS_Config_Builder\bin\Debug\PICS_Config_Builder.exe[m
[32m+[m[32mC:\Users\c.crane\source\repos\PICS_Config_Builder\PICS_Config_Builder\bin\Debug\PICS_Config_Builder.pdb[m
[32m+[m[32mC:\Users\c.crane\source\repos\PICS_Config_Builder\PICS_Config_Builder\bin\Debug\PICS_Config_Builder.xml[m
[32m+[m[32mC:\Users\c.crane\source\repos\PICS_Config_Builder\PICS_Config_Builder\obj\Debug\PICS_Config_Builder.vbprojAssemblyReference.cache[m
[32m+[m[32mC:\Users\c.crane\source\repos\PICS_Config_Builder\PICS_Config_Builder\obj\Debug\Interop.VBScript_RegExp_55.dll[m
[32m+[m[32mC:\Users\c.crane\source\repos\PICS_Config_Builder\PICS_Config_Builder\obj\Debug\PICS_Config_Builder.vbproj.ResolveComReference.cache[m
[32m+[m[32mC:\Users\c.crane\source\repos\PICS_Config_Builder\PICS_Config_Builder\obj\Debug\PICS_Config_Builder.Form1.resources[m
[32m+[m[32mC:\Users\c.crane\source\repos\PICS_Config_Builder\PICS_Config_Builder\obj\Debug\PICS_Config_Builder.Resources.resources[m
[32m+[m[32mC:\Users\c.crane\source\repos\PICS_Config_Builder\PICS_Config_Builder\obj\Debug\PICS_Config_Builder.vbproj.GenerateResource.cache[m
[32m+[m[32mC:\Users\c.crane\source\repos\PICS_Config_Builder\PICS_Config_Builder\obj\Debug\PICS_Config_Builder.vbproj.CoreCompileInputs.cache[m
[32m+[m[32mC:\Users\c.crane\source\repos\PICS_Config_Builder\PICS_Config_Builder\obj\Debug\PICS_Config_Builder.exe[m
[32m+[m[32mC:\Users\c.crane\source\repos\PICS_Config_Builder\PICS_Config_Builder\obj\Debug\PICS_Config_Builder.xml[m
[32m+[m[32mC:\Users\c.crane\source\repos\PICS_Config_Builder\PICS_Config_Builder\obj\Debug\PICS_Config_Builder.pdb[m
[1mdiff --git a/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.vbproj.GenerateResource.cache b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.vbproj.GenerateResource.cache[m
[1mnew file mode 100644[m
[1mindex 0000000..6ac647d[m
Binary files /dev/null and b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.vbproj.GenerateResource.cache differ
[1mdiff --git a/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.vbproj.ResolveComReference.cache b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.vbproj.ResolveComReference.cache[m
[1mnew file mode 100644[m
[1mindex 0000000..9ce41d7[m
Binary files /dev/null and b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.vbproj.ResolveComReference.cache differ
[1mdiff --git a/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.vbprojAssemblyReference.cache b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.vbprojAssemblyReference.cache[m
[1mnew file mode 100644[m
[1mindex 0000000..c831a55[m
Binary files /dev/null and b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.vbprojAssemblyReference.cache differ
[1mdiff --git a/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.xml b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..6fb3972[m
[1m--- /dev/null[m
[1m+++ b/PICS_Config_Builder/obj/Debug/PICS_Config_Builder.xml[m
[36m@@ -0,0 +1,26 @@[m
[32m+[m[32mï»¿<?xml version="1.0"?>[m
[32m+[m[32m<doc>[m
[32m+[m[32m<assembly>[m
[32m+[m[32m<name>[m
[32m+[m[32mPICS_Config_Builder[m
[32m+[m[32m</name>[m
[32m+[m[32m</assembly>[m
[32m+[m[32m<members>[m
[32m+[m[32m<member name="T:PICS_Config_Builder.My.Resources.Resources">[m
[32m+[m[32m<summary>[m
[32m+[m[32m  A strongly-typed resource class, for looking up localized strings, etc.[m
[32m+[m[32m</summary>[m
[32m+[m[32m</member>[m
[32m+[m[32m<member name="P:PICS_Config_Builder.My.Resources.Resources.ResourceManager">[m
[32m+[m[32m<summary>[m
[32m+[m[32m  Returns the cached ResourceManager instance used by this class.[m
[32m+[m[32m</summary>[m
[32m+[m[32m</member>[m
[32m+[m[32m<member name="P:PICS_Config_Builder.My.Resources.Resources.Culture">[m
[32m+[m[32m<summary>[m
[32m+[m[32m  Overrides the current thread's CurrentUICulture property for all[m
[32m+[m[32m  resource lookups using this strongly typed resource class.[m
[32m+[m[32m</summary>[m
[32m+[m[32m</member>[m
[32m+[m[32m</members>[m
[32m+[m[32m</doc>[m
[1mdiff --git a/PICS_Config_Builder/obj/Debug/TempPE/My Project.Resources.Designer.vb.dll b/PICS_Config_Builder/obj/Debug/TempPE/My Project.Resources.Designer.vb.dll[m
[1mnew file mode 100644[m
[1mindex 0000000..6f9a302[m
Binary files /dev/null and b/PICS_Config_Builder/obj/Debug/TempPE/My Project.Resources.Designer.vb.dll differ
[1mdiff --git a/PICS_Config_Builder/obj/Release/PICS_Config_Builder.vbproj.CoreCompileInputs.cache b/PICS_Config_Builder/obj/Release/PICS_Config_Builder.vbproj.CoreCompileInputs.cache[m
[1mnew file mode 100644[m
[1mindex 0000000..fdfa005[m
[1m--- /dev/null[m
[1m+++ b/PICS_Config_Builder/obj/Release/PICS_Config_Builder.vbproj.CoreCompileInputs.cache[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32m3efb0bbf10566d3ca45b382a010e97b9ed6cd842[m
[1mdiff --git a/README.md b/README.md[m
[1mnew file mode 100644[m
[1mindex 0000000..3213e72[m
[1m--- /dev/null[m
[1m+++ b/README.md[m
[36m@@ -0,0 +1,4 @@[m
[32m+[m[32m# PICS_Config_Builder[m
[32m+[m[32mPrime Controls - PICS Simulation input file assembler[m
[32m+[m[32mstarted by Charles Crane - Sept 12, 2018..[m
[32m+[m[32mThis will replace an Excel application due to problems with VBA not playing nice with later versions of Excel after version 2010.[m
